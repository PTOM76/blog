<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>ぴたぶろぐ</title>
	<atom:link href="https://blog.pkom.ml/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.pkom.ml</link>
	<description>自分が書きたいことを書くだけのブログ</description>
	<lastBuildDate>Mon, 15 Aug 2022 09:09:01 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.1</generator>

<image>
	<url>https://blog.pkom.ml/wp-content/uploads/2022/07/cropped-109135739-1-32x32.png</url>
	<title>ぴたぶろぐ</title>
	<link>https://blog.pkom.ml</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>【Wired Redstone】Fabric版のRSWires、「Wired Redstone」を紹介【Minecraft 1.18.2】</title>
		<link>https://blog.pkom.ml/20220815240/</link>
					<comments>https://blog.pkom.ml/20220815240/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Mon, 15 Aug 2022 09:06:54 +0000</pubDate>
				<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[FabricMC]]></category>
		<category><![CDATA[MOD]]></category>
		<category><![CDATA[MOD紹介]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=240</guid>

					<description><![CDATA[はじめに この記事を書いた時点では、バージョンは1.18～1.19まで対応しているみたいです。 RSWiresのようなmod、Kneelawk氏のWired Redstoneを紹介します。 Wired Redstoneの [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>はじめに</h2>
<p>この記事を書いた時点では、バージョンは1.18～1.19まで対応しているみたいです。<br />
RSWiresのようなmod、Kneelawk氏のWired Redstoneを紹介します。</p>
<h2>Wired Redstoneのダウンロード先</h2>
<a rel="noopener" href="https://www.curseforge.com/minecraft/mc-mods/wired-redstone" title="Just a moment..." class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.curseforge.com%2Fminecraft%2Fmc-mods%2Fwired-redstone?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Just a moment...</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.curseforge.com/minecraft/mc-mods/wired-redstone" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.curseforge.com</div></div></div></div></a>
<h2>アイテムをつくる</h2>
<p>まず、Redstone Assemblerをつくらないといけません。</p>
<p><img loading="lazy" class="alignnone size-full wp-image-254" src="https://blog.pkom.ml/wp-content/uploads/2022/08/wiredredstone_redstone_assembler.png" alt="" width="300" height="132" /></p>
<p>このGUIかっこいいですよね～<br />
ちなみに左下のInputに燃料を入れないといけないみたいです。</p>
<p><img loading="lazy" width="382" height="497" class="alignnone wp-image-255 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-25.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-25.png 382w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-25-231x300.png 231w" sizes="(max-width: 382px) 100vw, 382px" /></p>
<p>Redstone Assemblerでつくれるアイテム (色付きはなし)</p>
<p><img loading="lazy" class="alignnone size-full wp-image-241" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.45.11.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-242" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.45.17.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-243" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.45.39.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-244" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.46.03.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-245" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.46.40.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-246" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.48.14.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-247" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.48.16.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-248" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.48.17.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-249" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.48.18.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-250" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.48.20.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-251" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.48.20_2.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-252" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.48.22.png" alt="" width="300" height="132" /> <img loading="lazy" class="alignnone size-medium wp-image-253" src="https://blog.pkom.ml/wp-content/uploads/2022/08/2022-08-15_17.48.25.png" alt="" width="300" height="132" /></p>
<h2>使ってみる</h2>
<p><img loading="lazy" width="856" height="512" class="alignnone wp-image-256 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-26.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-26.png 856w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-26-300x179.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-26-768x459.png 768w" sizes="(max-width: 856px) 100vw, 856px" /></p>
<p>AND回路をシンプルにつくることができました。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220815240/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【TechReborn】TRのゴムをつくる過程【Minecraft 1.18.2】</title>
		<link>https://blog.pkom.ml/20220815220/</link>
					<comments>https://blog.pkom.ml/20220815220/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Mon, 15 Aug 2022 08:36:57 +0000</pubDate>
				<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[FabricMC]]></category>
		<category><![CDATA[MOD]]></category>
		<category><![CDATA[TechReborn]]></category>
		<category><![CDATA[工業化MOD]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=220</guid>

					<description><![CDATA[樹液を得る ツリータップ(木の蛇口, Treetap)をつくりましょう。 作業台で木材x4と棒x1を以下のように並べると作れます。 ゴムの木は少し探すのが大変です。 ゴムの木の黄色っぽいものがあるところをツリータップで右 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>樹液を得る</h2>
<p>ツリータップ(木の蛇口, Treetap)をつくりましょう。<br />
作業台で木材x4と棒x1を以下のように並べると作れます。</p>
<p><img loading="lazy" class="alignnone size-full wp-image-224" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_crafting_table_tool_treetap.png" alt="" width="300" height="132" /></p>
<p><img loading="lazy" width="856" height="512" class="alignnone wp-image-221 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-17.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-17.png 856w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-17-300x179.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-17-768x459.png 768w" sizes="(max-width: 856px) 100vw, 856px" /></p>
<p>ゴムの木は少し探すのが大変です。</p>
<p><img loading="lazy" width="856" height="512" class="alignnone wp-image-222 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-18.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-18.png 856w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-18-300x179.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-18-768x459.png 768w" sizes="(max-width: 856px) 100vw, 856px" /></p>
<p>ゴムの木の黄色っぽいものがあるところをツリータップで右クリックすると樹液を得ることができます。</p>
<h2>ゴムをつくる (1)</h2>
<p>樹液 (Sap)をかまどで焼くとゴム (Rubber)ができます。<br />
後々マシンをつくるため、最低7個は焼いておきましょう。<br />
多く焼かないのは後々抽出機でゴムをつくるためです。<br />
※かまど</p>
<p><img loading="lazy" class="alignnone size-full wp-image-231" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_smelting_rubber.png" alt="" width="300" height="98" /></p>
<h2>マシンをつくる</h2>
<p>この２つのマシンをつくるために最低必要な材料を記載しておきます。</p>
<p>銅インゴット (Copper Ingot) x6<br />
鉛インゴット (LeadIngot) x4<br />
鉄インゴット (IronIngot) x17<br />
レッドストーン (Redstone) x4<br />
丸石 (Cobblestone) x8<br />
ゴム (Rubber) x7<br />
木材 (Wood) x18</p>
<h3>発電機</h3>
<p>銅線 (Copper Cable)のレシピとその下の3つが被覆された銅線 (Insulated Copper Cable)のレシピです。</p>
<p><img loading="lazy" class="alignnone size-full wp-image-238" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_crafting_table_cable_copper_cable.png" alt="" width="300" height="132" /><img loading="lazy" width="307" height="415" class="alignnone wp-image-228 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-20.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-20.png 307w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-20-222x300.png 222w" sizes="(max-width: 307px) 100vw, 307px" /></p>
<p>レッドストーン蓄電池 (Red Cell Battery)</p>
<p><img loading="lazy" class="alignnone size-full wp-image-226" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_crafting_table_battery_red_cell_battery_2.png" alt="" width="300" height="132" /></p>
<p>精錬鉄インゴット (Refined Iron Ingot)<br />
※かまど</p>
<p><img loading="lazy" class="alignnone size-full wp-image-237" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_smelting_refined_iron_ingot_from_iron_ingot.png" alt="" width="300" height="98" /></p>
<p>基本機械骨格 (Basic Machine Frame)</p>
<p><img loading="lazy" class="alignnone size-full wp-image-227" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_crafting_table_machine_block_basic_machine_frame.png" alt="" width="300" height="132" /></p>
<p>発電機 (Generator)</p>
<p><img loading="lazy" class="alignnone size-full wp-image-225" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_crafting_table_machine_solid_fuel_generator.png" alt="" width="300" height="132" /></p>
<p>マシンフレーム(基本機械骨格)は後々抽出機でも使うので２つ作っておきましょう。銅線は7個以上つくってもいいでしょう。</p>
<h3>抽出機</h3>
<p>電子基板 (Electronic Circuit)</p>
<p><img loading="lazy" class="alignnone size-full wp-image-229" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_crafting_table_parts_electronic_circuit.png" alt="" width="300" height="132" /></p>
<p>抽出機 (Extractor)</p>
<p><img loading="lazy" class="alignnone size-full wp-image-230" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_crafting_table_machine_extractor.png" alt="" width="300" height="132" /></p>
<h2>ゴムをつくる (2)</h2>
<p>抽出機に樹液を入れるとかまどで焼くときより3倍になって得です。<br />
※抽出機</p>
<p><img loading="lazy" class="alignnone size-full wp-image-232" src="https://blog.pkom.ml/wp-content/uploads/2022/08/techreborn_extractor_rubber_from_sap.png" alt="" width="300" height="132" /></p>
<h2>おまけ</h2>
<p>「Plant In A Jar」というMODのPlant Jarを使うと自動でゴムをつくることができますｗ</p>
<p><img loading="lazy" width="856" height="512" class="alignnone wp-image-233 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-21.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-21.png 856w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-21-300x179.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-21-768x459.png 768w" sizes="(max-width: 856px) 100vw, 856px" /></p>
<h3>マシンとコンテナの接続</h3>
<p>チェストとマシンを接続するにはGUIから設定する必要があります。</p>
<p><img loading="lazy" width="42" height="44" class="alignnone wp-image-235 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-23.png" />のボタンをクリックし、設定したい赤いスロットをクリックすると設定できます。<br />
Auto Inputをオンにしておきましょう。</p>
<p><img loading="lazy" width="856" height="512" class="alignnone wp-image-234 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-22.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-22.png 856w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-22-300x179.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-22-768x459.png 768w" sizes="(max-width: 856px) 100vw, 856px" /></p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220815220/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【Discord】強力なスパム対策ができるボット「Wick」を紹介します。</title>
		<link>https://blog.pkom.ml/20220813212/</link>
					<comments>https://blog.pkom.ml/20220813212/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Sat, 13 Aug 2022 08:07:17 +0000</pubDate>
				<category><![CDATA[Discord]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[ソフトウェア]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[スパム対策]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=212</guid>

					<description><![CDATA[はじめに Discordでは荒らされているサーバーを数々見かけます。 DiscordにはBAN、キック、タイムアウト、低速チャットなどがありますが、それだけでは必ずしもとは言いませんが、完全に荒らしを防ぐことができません [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>はじめに</h2>
<p>Discordでは荒らされているサーバーを数々見かけます。<br />
DiscordにはBAN、キック、タイムアウト、低速チャットなどがありますが、それだけでは必ずしもとは言いませんが、完全に荒らしを防ぐことができません。<br />
そのため、botで荒らし対策していることが多いので、今回は荒らし対策のボットの中で最も強力だと思った「Wick」を紹介したいと思います。</p>
<p>ほんと日本語でこのBot紹介している記事見かけませんよね。<br />
昔書いた記事を再度、ここで見やすく書き直すことにします。<br />
一部そのままにしているところもあります。</p>
<p>私も最初は公式のDocsを読みながら、フレンドに教えてもらいながらとセットアップに苦労しました。</p>
<div class="blank-box bb-tab bb-point bb-yellow">・カスタマイズ性が高い<br />
・Vortexのように導入制限はない<br />
・ほぼほぼスパマーを撃退してくれる</div>
<h3>導入方法</h3>
<ol>
<li>まず、<a href="https://wickbot.com/">https://wickbot.com/</a>から「Add Wick」ボタンをクリックし、Discordのアカウントと紐付け、botをサーバーに導入しましょう。</li>
<li>Wickのロールの位置を上に持っていきましょう。<br />
<img id="thepasted-1" src="https://image02.seesaawiki.jp/f/o/fortunes-memo/fbOC_75yR8.png" /></li>
<li>サーバー上で「w!setup」と送信し、コマンドを実行しましょう。
<div class="alert-box common-icon-box">※このコマンドはサーバーの所有者、またはWickの権限(Discordの役職、ロールではない)所有者のみ実行できます。</div>
<p><img id="thepasted-2" src="https://image02.seesaawiki.jp/f/o/fortunes-memo/PdgUT_CHVf.png" /><br />
上の画像のようにすべての項目にチェックマークが付いていればWickのセットアップが成功しています。<br />
どれか1つでもバツマークが付いていると失敗しています。<br />
その際は再度、上に戻ってやり直しましょう。</p>
<div id="content_block_13-body" class="wiki-section-body-3 information-box common-icon-box">
<p>※確認したエラーのみ記載してます。もし、何かあれば報告ください。</p>
<table id="content_block_14">
<tbody>
<tr>
<th>エラーメッセージ</th>
<th>意味</th>
<th>対処法</th>
</tr>
<tr>
<td><a href="https://image01.seesaawiki.jp/f/o/fortunes-memo/UktzEeqSxe.png"><img loading="lazy" src="https://image01.seesaawiki.jp/f/o/fortunes-memo/UktzEeqSxe.png" width="16" height="16" border="0" /></a> Checking Wick&#8217;s role position&#8230;</td>
<td>× Wickのロールの位置を確認中&#8230;</td>
<td>番号2を参照</td>
</tr>
<tr>
<td><a href="https://image01.seesaawiki.jp/f/o/fortunes-memo/UktzEeqSxe.png"><img loading="lazy" src="https://image01.seesaawiki.jp/f/o/fortunes-memo/UktzEeqSxe.png" width="16" height="16" border="0" /></a> Checking for permissions&#8230;</td>
<td>× 権限を確認中&#8230;</td>
<td>素直に入れ直してWickに管理者権限を与えましょう。</td>
</tr>
<tr>
<td><a href="https://image01.seesaawiki.jp/f/o/fortunes-memo/UktzEeqSxe.png"><img loading="lazy" src="https://image01.seesaawiki.jp/f/o/fortunes-memo/UktzEeqSxe.png" width="16" height="16" border="0" /></a> Only Server Owners (Permit5) and up can use this command!</td>
<td>× サーバー所有者(許可レベル5)以上のみ、このコマンドを使えます！</td>
<td>所有者がこのコマンドを実行する、または「ユーザーへWickの権限を与える」の項目を参照</td>
</tr>
</tbody>
</table>
</div>
</li>
</ol>
<h3>Wickの設定</h3>
<div class="information-box common-icon-box"><a href="https://wickbot.com/docs/setup">https://wickbot.com/docs/setup</a><br />
こちらのドキュメントに細かく記載されています。</div>
<h4>おすすめの設定</h4>
<ol>
<li><a href="https://wickbot.com/dashboard">https://wickbot.com/dashboard</a>から設定したいサーバーの青いマーク(Server Overview)を選択しましょう。<img loading="lazy" width="1525" height="553" class="alignnone wp-image-213 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-14.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-14.png 1525w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-14-300x109.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-14-1024x371.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-14-768x278.png 768w" sizes="(max-width: 1525px) 100vw, 1525px" /></li>
<li>Auto Modの項目の「Filters」を選択<br />
<img id="thepasted-8" src="https://image01.seesaawiki.jp/f/o/fortunes-memo/jIu6ltJf7o.png" /></li>
<li>Warn(警告)、Mute(タイムアウト)、Kick(キック)、BANのどれかを選択し、Muteを選択した場合は、時間も設定しましょう。<br />
基本的に「Normal Message」(連投対策)と「Similar Message」(類似連投対策)は設定しておきましょう。<br />
<img loading="lazy" width="1253" height="809" class="alignnone wp-image-215 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-16.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-16.png 1253w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-16-300x194.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-16-1024x661.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-16-768x496.png 768w" sizes="(max-width: 1253px) 100vw, 1253px" /></li>
</ol>
<h4>ユーザーへWickの権限を与える</h4>
<p>w!s &lt;ユーザー/ロール&gt; ?add &lt;権限レベル？&gt;</p>
<p>ユーザー/ロールは名前でもIDでも構いません。<br />
権限レベル？は4がWickモデレーター、3がWick管理者、10が信頼されたWick管理者、11がサーバーオーナー、Wickオーナーとなるみたいです。</p>
<p><span data-slate-fragment="JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMnchcyUyMCUzQ3VzZXIlM0UlMjAlM0ZhZGQlMjAxMSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTdCJTIyb2JqZWN0JTIyJTNBJTIybWFyayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJjb2RlJTIyJTJDJTIyZGF0YSUyMiUzQSU3QiU3RCU3RCUyQyU3QiUyMm9iamVjdCUyMiUzQSUyMm1hcmslMjIlMkMlMjJ0eXBlJTIyJTNBJTIyYm9sZCUyMiUyQyUyMmRhdGElMjIlM0ElN0IlN0QlN0QlNUQlMkMlMjJzZWxlY3Rpb25zJTIyJTNBJTVCJTVEJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyOGFiNTlhNDNjMjM2NDIzNjkzZjk4ZmIxNDcxZDA5ZTMlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjI3NTQ4MjdlMzZmZTI0ZWFmYmYyZDI2OGEyZDliNzdhYiUyMiU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMmQ2MmJlN2MzMThiODQxNmRhOGE1ZDFjOTQ2MTdiMjA2JTIyJTdE">設定例: w!s 0123456789101112 ?add 11</span></p>
<ul>
<li><a href="https://docs.wickbot.com/v3/commands/settings/statics#permit">https://docs.wickbot.com/v3/commands/settings/statics#permit</a></li>
</ul>
<h3>便利なコマンド</h3>
<h4>w!purge [削除するメッセージ数] (オプションなど)</h4>
<p>例えば、<span data-slate-fragment="JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMnchcHVyZ2UlMjAxMCUyMGhhcyUyMHdobyUyMGlzJTIwZm5ha2klMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMm1hcmslMjIlMkMlMjJ0eXBlJTIyJTNBJTIyY29kZSUyMiUyQyUyMmRhdGElMjIlM0ElN0IlN0QlN0QlMkMlN0IlMjJvYmplY3QlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMmJvbGQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTdEJTVEJTJDJTIyc2VsZWN0aW9ucyUyMiUzQSU1QiU1RCU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMmE3ZjIxZDdmMzlmNzRhYzJhNDNmODQzZjM3ZGE5Y2UxJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyZmViYmRlMzlhNGQzNGM3ODk0YWIyZmM0MWI3NDRjNjIlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJmNmNjNmQzNTZhZjg0YzRmYWM3NDVmYWE5MDU4MDUxZiUyMiU3RA==">w!purge 10 -h who is fnakiだと&#8221;who is fnaki&#8221;を含むメッセージを10個消します。<br />
オプションは以下を参考にしてみてください。</span></p>
<ul>
<li><a href="https://docs.wickbot.com/v3/commands/moderation/purge">https://docs.wickbot.com/v3/commands/moderation/purge</a></li>
</ul>
<h2>おわりに</h2>
<p>寝ていても荒らし対策してくれるので便利ですよね～^^<br />
ただ、設定も多いので困りました。</p>
<h2>参考</h2>
<ul>
<li><a href="https://docs.wickbot.com/">https://docs.wickbot.com/</a></li>
<li><a href="https://wickbot.com/docs/setup">https://wickbot.com/docs/setup</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220813212/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【Cloudflare】WikiChree.COMの設置にMuuMuuDomainとCoreServerでCloudflareを使った話</title>
		<link>https://blog.pkom.ml/20220807196/</link>
					<comments>https://blog.pkom.ml/20220807196/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Sun, 07 Aug 2022 10:25:20 +0000</pubDate>
				<category><![CDATA[サーバー]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[Cloudflare]]></category>
		<category><![CDATA[CoreServer]]></category>
		<category><![CDATA[MuuMuuDomain]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=196</guid>

					<description><![CDATA[はじめに WikiChree.COM、個人サイト、当ブログなど私の所有しているサイトではHTTPS化、サイバー攻撃(DDoS等)対策、キャッシング等をするためにCloudflareを使ってます。 Cloudflareは有 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>はじめに</h2>
<p>WikiChree.COM、個人サイト、当ブログなど私の所有しているサイトではHTTPS化、サイバー攻撃(DDoS等)対策、キャッシング等をするためにCloudflareを使ってます。<br />
Cloudflareは有料な部分もありますが、基本的には無料で使うことはできます。<br />
今回はそのCloudflareのセットアップ方法を説明します。<br />
WikiChree.COMではMuuMuuDomainとCoreServerを使っているのでMuuMuuDomainでDNSの設定、CloudflareでのDNSはCoreServerのIPを参照させますが、他のサービスでも参考になるとは思います。</p>
<h2>前提条件</h2>
<ul>
<li>独自ドメインを取得していて、ドメインからCoreServerのサーバーへアクセスできる状態であること。</li>
</ul>
<h2>Cloudflare</h2>
<h3>アカウント登録</h3>
<a rel="noopener" href="https://dash.cloudflare.com/sign-up" title="Please Wait... | Cloudflare" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fdash.cloudflare.com%2Fsign-up?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Please Wait... | Cloudflare</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://dash.cloudflare.com/sign-up" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">dash.cloudflare.com</div></div></div></div></a>
<p>上記のURLでCloudflareのアカウントを作成しましょう。<br />
右上から日本語を選択できます。</p>
<p><img loading="lazy" width="935" height="554" class="alignnone wp-image-197 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted.png 935w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-300x178.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-768x455.png 768w" sizes="(max-width: 935px) 100vw, 935px" /></p>
<h3>サイト追加</h3>
<p>作成ボタンをクリックしたら、左のサイドバーから「Web サイト」、真ん中の「サイトを追加」で進みましょう。</p>
<p><img loading="lazy" width="950" height="753" class="alignnone wp-image-198 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-1.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-1.png 950w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-1-300x238.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-1-768x609.png 768w" sizes="(max-width: 950px) 100vw, 950px" /></p>
<p>自分のルートドメインを入力して進みましょう。</p>
<p><img loading="lazy" width="639" height="329" class="alignnone wp-image-199 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-2.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-2.png 639w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-2-300x154.png 300w" sizes="(max-width: 639px) 100vw, 639px" /></p>
<p>無料である一番下のFreeプランにしました。</p>
<p><img loading="lazy" width="894" height="876" class="alignnone wp-image-200 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-3.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-3.png 894w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-3-300x294.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-3-768x753.png 768w" sizes="(max-width: 894px) 100vw, 894px" /></p>
<p>以前のDNSを自動で取得してくれるため、DNS管理の画面が出てきます、そのまま進めてください。</p>
<h3>ネームサーバーの設定</h3>
<p>以下の通りにドメイン レジストラ(MuuMuuDomain、Value Domain等)でCloudflareのネームサーバーを追加しましょう。</p>
<p><img loading="lazy" width="815" height="864" class="alignnone wp-image-201 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-4.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-4.png 815w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-4-283x300.png 283w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-4-768x814.png 768w" sizes="(max-width: 815px) 100vw, 815px" /></p>
<p>MuuMuuDomainではネームサーバー設定変更のボタンをクリックしてネームサーバーの画面が開けます。<br />
サービスによってはネームサーバーの設定画面、もしくはDNS設定画面でネームサーバーを指定することができます。</p>
<p><img loading="lazy" width="489" height="667" class="alignnone wp-image-202 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-5.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-5.png 489w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-5-220x300.png 220w" sizes="(max-width: 489px) 100vw, 489px" /></p>
<p><img loading="lazy" width="401" height="432" class="alignnone wp-image-203 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-6.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-6.png 401w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-6-278x300.png 278w" sizes="(max-width: 401px) 100vw, 401px" /></p>
<p>上記のように<span class="bold red">必ずCloudflareからコピーした</span>ネームサーバーのドメインを貼り付けてください。<br />
既に私は登録しているので、画像でムームードメインでの登録例を見せています。<br />
Cloudflareの方を進めましょう。<br />
レジストラ(ドメインサービス)によっては反映までに時間がかかるものもあるようですが、私はすぐに反映されました。<br />
あ、CoreServer側の設定は不要でしたね^^;</p>
<h4>ネームサーバー設定ガイド</h4>
<ul>
<li>お名前.com: <a href="https://www.onamae.com/guide/p/67">https://www.onamae.com/guide/p/67</a></li>
<li>ムームードメイン: <a href="https://support.muumuu-domain.com/hc/ja/articles/360047097273-%E3%83%8D%E3%83%BC%E3%83%A0%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E6%96%B9%E6%B3%95-GMO%E3%83%9A%E3%83%91%E3%83%9C%E4%BB%A5%E5%A4%96%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-">https://support.muumuu-domain.com/hc/ja/articles/360047097273-%E3%83%8D%E3%83%BC%E3%83%A0%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E6%96%B9%E6%B3%95-GMO%E3%83%9A%E3%83%91%E3%83%9C%E4%BB%A5%E5%A4%96%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-</a></li>
<li>バリュードメイン: <a href="https://www.value-domain.com/userguide/manual/modns">https://www.value-domain.com/userguide/manual/modns</a></li>
<li>Google Domains: <a href="https://support.google.com/domains/answer/3290309?hl=ja">https://support.google.com/domains/answer/3290309?hl=ja</a></li>
</ul>
<h2>おまけ</h2>
<h3>DDoS対策</h3>
<p>DDoS攻撃を受けている際はサイドバーの「概要」から「Under Attack モード」を有効にしてみてください。</p>
<p><img loading="lazy" width="338" height="61" class="alignnone wp-image-204 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-7.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-7.png 338w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-7-300x54.png 300w" sizes="(max-width: 338px) 100vw, 338px" /></p>
<p>一度オンにしてオフにしてみると以下のような画面が出てきます。</p>
<p><img loading="lazy" width="898" height="504" class="alignnone wp-image-205 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8.png 898w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-300x168.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-768x431.png 768w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-120x68.png 120w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-160x90.png 160w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-320x180.png 320w" sizes="(max-width: 898px) 100vw, 898px" /></p>
<p>セキュリティ レベルは攻撃されていないのであれば普通は標準かオフでもいいでしょう。<br />
1日1回、毎回DDoS攻撃されているのであれば、Unser Attack モード、もしくは高にしましょう。</p>
<h3>HTTPS化</h3>
<p>サイドバーの「SSL/TLS」からSSLの設定を開きましょう。</p>
<p><img loading="lazy" width="1040" height="497" class="alignnone wp-image-206 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9.png 1040w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9-300x143.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9-1024x489.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9-768x367.png 768w" sizes="(max-width: 1040px) 100vw, 1040px" /></p>
<p>サーバー上でSSL化しているのであれば「フル」、最初からSSL化していないのであれば「フレキシブル」でいいでしょう。<br />
これだけでHTTPS化は完了なのですが、ついでに以下の設定も行いましょう。</p>
<p>サイドバーの「SSL/TLS」＞「エッジ証明書」を開きましょう。</p>
<p><img loading="lazy" width="1040" height="239" class="alignnone wp-image-207 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10.png 1040w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10-300x69.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10-1024x235.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10-768x176.png 768w" sizes="(max-width: 1040px) 100vw, 1040px" /></p>
<p><img loading="lazy" width="1046" height="271" class="alignnone wp-image-208 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11.png 1046w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11-300x78.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11-1024x265.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11-768x199.png 768w" sizes="(max-width: 1046px) 100vw, 1046px" /></p>
<p>私は上記のように設定しています。<br />
日和見暗号化とは、暗号化済み、SSL化済みしているが、見た目上はhttpのままにできるという機能です。SEO対策には影響ありませんのでオンにしてても問題はありませんが、httpsの方が私は好きなのでオフにしてますね。</p>
<h3>キャッシング</h3>
<p>勝手にキャッシングされるようになってますが、3時間ぐらいにした方が良さそうです。JavaScript、CSSを更新しても、このキャッシュで更新されずに困ることがあるんですよね。<br />
<img loading="lazy" width="1095" height="861" class="alignnone wp-image-209 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12.png 1095w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12-300x236.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12-1024x805.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12-768x604.png 768w" sizes="(max-width: 1095px) 100vw, 1095px" /></p>
<p>3時間にしておきます。<br />
また、更新したCSS、JavaScript、画像など確認したい際は開発モードを有効にするといいでしょう。</p>
<p><img loading="lazy" width="335" height="68" class="alignnone wp-image-210 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-13.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-13.png 335w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-13-300x61.png 300w" sizes="(max-width: 335px) 100vw, 335px" /></p>
<h2>おわりに</h2>
<p>イメージ的には「独自ドメイン」→「Cloudflare」→「CoreServer」といった感じでしょうかね。</p>
<p>Cloudflareはアクセス解析、ドメイン購入といろいろできるので素晴らしいサービスだと思います。<br />
無料でここまでできるのも凄いですよね。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220807196/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>GitHub Pagesを利用してMavenリポジトリをつくる</title>
		<link>https://blog.pkom.ml/20220729178/</link>
					<comments>https://blog.pkom.ml/20220729178/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Fri, 29 Jul 2022 03:18:02 +0000</pubDate>
				<category><![CDATA[Git]]></category>
		<category><![CDATA[GitHub]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[GitHub Pages]]></category>
		<category><![CDATA[Maven]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=178</guid>

					<description><![CDATA[はじめに FabricMCのMOD開発でライブラリをつくったのでMavenリポジトリをGitHubのリポジトリへ設置し、GitHub Pagesで公開してみました。 設置したMavenリポジトリ Index of /ma [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>はじめに</h2>
<p>FabricMCのMOD開発でライブラリをつくったのでMavenリポジトリをGitHubのリポジトリへ設置し、GitHub Pagesで公開してみました。</p>
<h3>設置したMavenリポジトリ</h3>
<a rel="noopener" href="https://maven.pkom.ml/" title="Index of /" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fmaven.pkom.ml%2F?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Index of /</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://maven.pkom.ml/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">maven.pkom.ml</div></div></div></div></a>
<h3 id="content_1_2">PHPスクリプト</h3>
<p>PHPでMavenリポジトリをアップロードし、自動的にディレクトリリストのHTMLを生成し、GitHubへプッシュするスクリプトを書いてみました。</p>
<a rel="noopener" href="https://github.com/Pitan76/maven/raw/main/maven.php" title="Index of {$displaydir}" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fgithub.com%2FPitan76%2Fmaven%2Fraw%2Fmain%2Fmaven.php?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Index of {$displaydir}</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://github.com/Pitan76/maven/raw/main/maven.php" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">github.com</div></div></div></div></a>
<h3 id="content_1_3">前提条件</h3>
<ul class="list1 list-indent1">
<li>PHPを動作させるWebサーバーをインストールしておく(XAMPP、LAMP等)</li>
<li>Gitを入れておく</li>
<li>GitHubのアカウントをつくっておく</li>
<li>Mavenリポジトリとして使うGitリポジトリをGitHubにつくっておく</li>
</ul>
<h3>やり方</h3>
<p>Pitan Mod Wikiの文章をそのまま載せておきます。</p>
<a rel="noopener" href="https://wikichree.com/pitan76/?Diary/2022-07-14" title="Diary/2022-07-14 - Pitan&#x20;Mod&#x20;Wiki" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwikichree.com%2Fpitan76%2F%3FDiary%2F2022-07-14?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Diary/2022-07-14 - Pitan&#x20;Mod&#x20;Wiki</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://wikichree.com/pitan76/?Diary/2022-07-14" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">wikichree.com</div></div></div></div></a>
<p>1. GitHubのGitリポジトリを開き、[Settings]→[Pages]→SourceがNoneになっているのでbranchを選択する<br />
2. 特定のhtdocsにmavenリポジトリとするフォルダをつくる。(htdocs/maven/にしました。)<br />
3. つくったフォルダにmaven.phpを放り込む。(今回はhtdocs/maven/maven.phpに放り込みました。)<br />
4. つくったフォルダでターミナルを開き、<strong>git init</strong>を実行<br />
5. <strong>git add *</strong>を実行<br />
6. <strong>git commit -m &#8220;(任意)&#8221;</strong>を実行<br />
7. <strong>git branch -M main</strong>を実行<br />
8. <strong>git remote add origin https://github.com/(ユーザー名)/(リポジトリ名).git</strong>を実行<br />
9. <strong>git push -u origin main</strong>を実行<br />
10. ブラウザでmaven.phpを開き、jarをアップロードする。(私の場合はlocalhost/maven/maven.phpとなっています)</p>
<h3 id="content_1_5">maven.phpの仕様</h3>
<ul class="list1 list-indent1">
<li>アップロード後、自動でgit push</li>
<li>ハッシュファイルを作成する</li>
<li>ディレクトリリストのindex.htmlを自動生成する</li>
</ul>
<p>ここからは任意ですが、Customドメインもついでに設定しておきます<br />
Custom domainで自分のドメインを設定しました。</p>
<h2>さいごに</h2>
<p>MavenリポジトリをGitHub Pagesに設置し、ライブラリを公開できて面白かったです。<br />
正しい方法ではないと思うので外部の関連サイトも載せておきます。</p>
<h3>関連リンク</h3>
<a rel="noopener" href="https://weblabo.oscasierra.net/maven-deploy-github/" title="GitHubにMavenリポジトリを構築してライブラリを公開する方法 |" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/35d08b22d0390132263fef83e824cac8.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">GitHubにMavenリポジトリを構築してライブラリを公開する方法 |</div><div class="blogcard-snippet external-blogcard-snippet">本稿では、Maven リポジトリを GitHub 上に作成して jar ライブラリを配布する方法について解説します。</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://weblabo.oscasierra.net/maven-deploy-github/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">weblabo.oscasierra.net</div></div></div></div></a>
<a rel="noopener" href="https://com4dc.hatenablog.com/entry/2020/03/30/224953" title="GithubのRepositoryをmavenリポジトリとして使う - com4dc’s blog" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/7f1b87261cff8d08d94b7a2dcc02f4f3.jpg" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">GithubのRepositoryをmavenリポジトリとして使う - com4dc’s blog</div><div class="blogcard-snippet external-blogcard-snippet">なんで今さら 数年前に開発が停止してしまっているコードをフォークして利用したい 元のソースのApache License 2.0。フォークしたコードはOSSとして公開しないといけない？（うろ覚え・・・） ソースコードをそのまま組み込むのはNGそうな気がする？ 修正と再頒布そのものは禁止されていない（はず maven の...</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://com4dc.hatenablog.com/entry/2020/03/30/224953" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">com4dc.hatenablog.com</div></div></div></div></a>
<a rel="noopener" href="https://qiita.com/koduki/items/6babcc6f2b233da96e06" title="2020年のMavenリポジトリの作り方 - Qiita" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-9f5428127621718a910c8b63951390ad.png?ixlib=rb-4.0.0&#038;w=1200&#038;mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTkxNiZ0eHQ9MjAyMCVFNSVCOSVCNCVFMyU4MSVBRU1hdmVuJUUzJTgzJUFBJUUzJTgzJTlEJUUzJTgyJUI4JUUzJTgzJTg4JUUzJTgzJUFBJUUzJTgxJUFFJUU0JUJEJTlDJUUzJTgyJThBJUU2JTk2JUI5JnR4dC1jb2xvcj0lMjMyMTIxMjEmdHh0LWZvbnQ9SGlyYWdpbm8lMjBTYW5zJTIwVzYmdHh0LXNpemU9NTYmdHh0LWNsaXA9ZWxsaXBzaXMmdHh0LWFsaWduPWxlZnQlMkN0b3Amcz1jOWJkN2RhOTRhYmY5ZjI5MTQ3OTE4ZmI2ODFjYThkOA&#038;mark-x=142&#038;mark-y=112&#038;blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTYxNiZ0eHQ9JTQwa29kdWtpJnR4dC1jb2xvcj0lMjMyMTIxMjEmdHh0LWZvbnQ9SGlyYWdpbm8lMjBTYW5zJTIwVzYmdHh0LXNpemU9MzYmdHh0LWFsaWduPWxlZnQlMkN0b3Amcz01N2QxMjJjOGVkNzgwMmM0ZGM0NzhmNzUzYTVjN2M2Yw&#038;blend-x=142&#038;blend-y=491&#038;blend-mode=normal&#038;s=5065ef28c6bc083f309e217ff68622f0" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">2020年のMavenリポジトリの作り方 - Qiita</div><div class="blogcard-snippet external-blogcard-snippet">

はじめに

Javaのエンジニアであれば何だかんだでMavenリポジトリを使うことは非常に多いと思います。Gradleであっても使いますしね。

OSSなどはセントラルリポジトリから落とすとして自作のライブラリの管理をどうしていま...</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://qiita.com/koduki/items/6babcc6f2b233da96e06" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">qiita.com</div></div></div></div></a>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220729178/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】描画処理 &#8211; その1(背景色) #4</title>
		<link>https://blog.pkom.ml/20220728173/</link>
					<comments>https://blog.pkom.ml/20220728173/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:53:06 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=173</guid>

					<description><![CDATA[Color4fクラス 色を保存するためのクラスをつくっておきます。 なくてもいいんですが、私はつくる派です。 package ml.pkom.lwjgl.tutorial; public class Color4f {  [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>Color4fクラス</h2>
<p>色を保存するためのクラスをつくっておきます。<br />
なくてもいいんですが、私はつくる派です。</p>
<pre>package ml.pkom.lwjgl.tutorial;

public class Color4f {
    public float r;
    public float g;
    public float b;
    public float a;
    
    public Color4f(float r, float g, float b) {
        this(r, g, b, 1.0f);
    }
    
    public Color4f(float r, float g, float b, float a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
}</pre>
<h2>Windowクラス</h2>
<p>先ほどつくったColor4fクラスを使います。<br />
つくってない場合は一つ一つr, g, bのfloat型変数を用意する必要がありますね。</p>
<pre>// 背景色
public Color4f bgColor new Color4f(0f, 0f, 0f);</pre>
<pre>public void init() {
    (省略)

    // リサイズをできるように設定
    GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

    GLFW.glfwMakeContextCurrent(window);
    GL.createCapabilities();

    // ビデオモードの取得
    GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

    (省略)
}</pre>
<pre>// 背景色をセット
public void setBgColor(float r, float g, float b) {
    this.bgColor = new Color4f(r, g, b);
}</pre>
<p>update関数に以下の処理を追加します。</p>
<pre>// 背景色を描画
GL11.glClearColor(bgColor.r, bgColor.g, bgColor.b, bgColor.a);
GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);</pre>
<p><img loading="lazy" width="413" height="241" class="alignnone wp-image-174 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21.png 413w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21-300x175.png 300w" sizes="(max-width: 413px) 100vw, 413px" /></p>
<p>どこかに以下のコードを埋め込むと黄色になると思います。</p>
<pre>window.setBgColor(1.0f, 1.0f, 0.0f);</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728173/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】60FPSでループ処理 #3</title>
		<link>https://blog.pkom.ml/20220728169/</link>
					<comments>https://blog.pkom.ml/20220728169/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:34:10 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=169</guid>

					<description><![CDATA[Windowクラスへ以下の変数を追記しておく。 // 基準のFPS public int fps = 60; // FPS public double fpsCap = fps; public double time,  [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Windowクラスへ以下の変数を追記しておく。</p>
<pre>// 基準のFPS
public int fps = 60;

// FPS
public double fpsCap = fps;

public double time, processedTime;</pre>
<p>以下の関数も追記</p>
<pre>public boolean isUpdating() {
    double nextTime = getTime();
    double passedTime = nextTime - time;
    processedTime += passedTime;
    time = nextTime;

    while (processedTime &gt; 1.0/fpsCap) {
        processedTime -= 1.0/fpsCap;
        return true;
    }
    return false;
}

// 現在のFPSを取得
public double getFPS() {
    return fpsCap;
}

// 時間の取得
public double getTime() {
    return (double) System.nanoTime() / (double) 1000000000;
}</pre>
<p>Windowクラスのinit()関数の最後に以下の処理を追記</p>
<pre>time = getTime();</pre>
<p><img loading="lazy" width="281" height="447" class="alignnone wp-image-170 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19.png 281w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19-189x300.png 189w" sizes="(max-width: 281px) 100vw, 281px" /></p>
<h2>Mainクラス(動作確認)</h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {
        if (window.isUpdating()) {
            // イベントの更新
            window.update();

            System.out.println(window.getFPS());

            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img loading="lazy" width="257" height="346" class="alignnone wp-image-171 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20.png 257w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20-223x300.png 223w" sizes="(max-width: 257px) 100vw, 257px" /></p>
<p>現在のFPS(60.0)が表示されたら成功です。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728169/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】キー、マウス入力 #2</title>
		<link>https://blog.pkom.ml/20220728160/</link>
					<comments>https://blog.pkom.ml/20220728160/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:10:32 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=160</guid>

					<description><![CDATA[次はキー、マウス入力となります。 キーの入力 // キーが押されているか public boolean isKeyDown(int key) { return GLFW.glfwGetKey(window, key) = [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>次はキー、マウス入力となります。</p>
<h2>キーの入力</h2>
<pre>// キーが押されているか
public boolean isKeyDown(int key) {
    return GLFW.glfwGetKey(window, key) == 1;
}

// キーが押されたか
public boolean isKeyPressed(int key) {
    return isKeyDown(key) &amp;&amp; !lastKeys[key];
}

// キーが離されたか
public boolean isKeyReleased(int key) {
    return !isKeyDown(key) &amp;&amp; lastKeys[key];
}</pre>
<p>上記のコードをWindowクラスに追加してください。<br />
GLFW.glfwGetKeyでは引数に指定されたキーが押されているか確認できます。1が返されると押されているということになるみたいですね。</p>
<h2>マウスの入力</h2>
<pre>// マウスが押されているか
public boolean isMouseDown(int button) {
    return GLFW.glfwGetMouseButton(window, button) == 1;
}

// マウスが押されたか
public boolean isMousePressed(int button) {
    return isMouseDown(button) &amp;&amp; !lastMouseButtons[button];
}

// マウスが離されたか
public boolean isMouseReleased(int button) {
    return !isMouseDown(button) &amp;&amp; lastMouseButtons[button];
}</pre>
<p>こちらもWindowクラスに付け足してください。<br />
上の項目の仕様と同じみたいです。</p>
<pre>// 最後に押されたキー
public boolean[] lastKeys = new boolean[GLFW.GLFW_KEY_LAST];

// 最後に押されたマウスボタン
public boolean[] lastMouseButtons = new boolean[GLFW.GLFW_MOUSE_BUTTON_LAST];</pre>
<p>上記の配列は上らへんに追記しておいてください。<br />
これがないと最後に押されたキーを記録できません。</p>
<pre>public void update() {
    for (int i = 0; i &lt; GLFW.GLFW_KEY_LAST; i++)
        lastKeys[i] = isKeyDown(i);
    for (int i = 0; i &lt; GLFW.GLFW_MOUSE_BUTTON_LAST; i++)
        lastMouseButtons[i] = isMouseDown(i);

    // マウスなど入力されたイベントを記録する
    GLFW.glfwPollEvents();
}</pre>
<p>update関数にlastKeys, lastMouseButtonsへ最後に押されたキーを保存する処理を追加します。</p>
<h2>マウスカーソルの座標</h2>
<pre>// マウスカーソルのX座標を取得
public double getMouseX() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, buffer, null);
    return buffer.get(0);
}

// マウスカーソルのY座標を取得
public double getMouseY() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, null, buffer);
    return buffer.get(0);
}</pre>
<p>※DoubleBufferはダブルバッファリングではありません。<br />
Double型のバッファにglfwGetCursorPos関数がマウスカーソルの位置を書き込むみたいですね。</p>
<h2>動作確認</h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {

        // イベントの更新
        window.update();

        if (window.isKeyPressed(GLFW.GLFW_KEY_A)) {
            System.out.println("Pressed A");
        }
        if (window.isKeyReleased(GLFW.GLFW_KEY_A)) {
            System.out.println("Released A");
        }
        if (window.isMousePressed(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Pressed Left");
            System.out.println("CursorPos: (" + window.getMouseX() + ", " + window.getMouseY() + ")");
        }
        if (window.isMouseReleased(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Released Left");
        }

        // バッファの更新
        window.swapBuffers();

    }
}</pre>
<p><img loading="lazy" width="233" height="270" class="alignnone wp-image-167 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-18.png" /></p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728160/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】ウィンドウの作成 #1</title>
		<link>https://blog.pkom.ml/20220728158/</link>
					<comments>https://blog.pkom.ml/20220728158/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 10:33:02 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=158</guid>

					<description><![CDATA[適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。 Windowクラス package ml.pkom.lwjgl.tutorial; import org.lwjgl. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。</p>
<ul>
<li>Windowクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWVidMode;
import static org.lwjgl.system.MemoryUtil.*;

public class Window {

    public long window;

    // ウィンドウの横幅
    public int width = 640;

    // ウィンドウの縦幅
    public int height = 360;

    // ウィンドウのタイトル名
    public String title = "HogeHoge";

    public void init() {
        // GLFWの初期化
        GLFW.glfwInit();

        // ウィンドウを作成
        window = GLFW.glfwCreateWindow(width, height, title, NULL, NULL);

        // ウィンドウが見えるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);

        // リサイズをできるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

        // ビデオモードの取得
        GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

        // 画面のサイズを取得
        int screenWidth = videoMode.width();
        int screenHeight = videoMode.height();

        // ウィンドウの位置を中央へセットする
        GLFW.glfwSetWindowPos(window, (screenWidth - width) / 2, (screenHeight - height) / 2);

        // ウィンドウを表示
        GLFW.glfwShowWindow(window);
    }

    // 閉じるボタンが押されるとtrueを返す
    public boolean isClosed() {
        return GLFW.glfwWindowShouldClose(window);
    }

    public void update() {
        // マウスなど入力されたイベントを記録する
        GLFW.glfwPollEvents();
    }

    public void swapBuffers() {
        // カラーバッファ(色表示)を入れ替える
        GLFW.glfwSwapBuffers(window);
    }
}</pre>
<ul>
<li>Mainクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

public class Main {
    public static void main(String[] args) {
        Window window = new Window();

        // ウィンドウの初期化
        window.init();

        // 閉じるまでループ
        while (!window.isClosed()) {
            // イベントの更新
            window.update();
            
            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img loading="lazy" width="642" height="392" class="alignnone wp-image-163 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17.png 642w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17-300x183.png 300w" sizes="(max-width: 642px) 100vw, 642px" /></p>
<p>実行してみるとウィンドウが表示されました。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728158/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】セットアップ #0</title>
		<link>https://blog.pkom.ml/20220728153/</link>
					<comments>https://blog.pkom.ml/20220728153/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 09:57:58 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=153</guid>

					<description><![CDATA[JavaのLWJGLを学ぶついでに記事も書こうと思います。 日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。 私のコードは好きに使ってもらって構いません。 開発環境 環境 OS: W [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>JavaのLWJGLを学ぶついでに記事も書こうと思います。<br />
日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。<br />
私のコードは好きに使ってもらって構いません。</p>
<p><iframe loading="lazy" title="3D Game using LWJGL 3 Tutorial - #1 Making a Window" width="1107" height="623" src="https://www.youtube.com/embed/ISWcMXxl26s?list=PLaWuTOi9sDepAlbNEOXhjjFSo2WBkWOT2" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
<h2>開発環境</h2>
<h3 style="text-align: left;">環境</h3>
<p>OS: Windows 11<br />
IDE: Intellij IDEA<br />
Java: OpenJDK 17<br />
LWJGL: 3.3.1</p>
<h3>pom.xml</h3>
<p>以下のページでpom.xmlを生成します。</p>
<a rel="noopener" href="https://www.lwjgl.org/customize" title="LWJGL - Lightweight Java Game Library" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.lwjgl.org%2Fcustomize?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">LWJGL - Lightweight Java Game Library</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.lwjgl.org/customize" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.lwjgl.org</div></div></div></div></a>
<p>Releseの方を選択してみます。</p>
<p>pom.xmlを生成したいのでMavenを選びます。</p>
<p><img loading="lazy" width="151" height="158" class="alignnone wp-image-154 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-14.png" /></p>
<p>JOMLも追加しておきます。</p>
<p><img loading="lazy" width="253" height="189" class="alignnone wp-image-155 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-15.png" /></p>
<p>下の「DOWNLOAD POM.XML」か「COPY TO CLIPBOARD」でpom.xmlを自身のpom.xmlに貼り付けるか一部だけ貼り付けてください。</p>
<p><img loading="lazy" width="698" height="69" class="alignnone wp-image-156 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16.png 698w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16-300x30.png 300w" sizes="(max-width: 698px) 100vw, 698px" /></p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728153/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
