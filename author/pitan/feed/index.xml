<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Pitan  |  ぴたぶろぐ</title>
	<atom:link href="https://blog.pkom.ml/author/pitan/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.pkom.ml</link>
	<description>自分が書きたいことを書くだけのブログ</description>
	<lastBuildDate>Thu, 28 Jul 2022 14:53:17 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.1</generator>

<image>
	<url>https://blog.pkom.ml/wp-content/uploads/2022/07/cropped-109135739-1-32x32.png</url>
	<title>Pitan  |  ぴたぶろぐ</title>
	<link>https://blog.pkom.ml</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>【LWJGL】描画処理 &#8211; その1(背景色) #4</title>
		<link>https://blog.pkom.ml/20220728173/</link>
					<comments>https://blog.pkom.ml/20220728173/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:53:06 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=173</guid>

					<description><![CDATA[Color4fクラス 色を保存するためのクラスをつくっておきます。 なくてもいいんですが、私はつくる派です。 package ml.pkom.lwjgl.tutorial; public class Color4f {  [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>Color4fクラス</h2>
<p>色を保存するためのクラスをつくっておきます。<br />
なくてもいいんですが、私はつくる派です。</p>
<pre>package ml.pkom.lwjgl.tutorial;

public class Color4f {
    public float r;
    public float g;
    public float b;
    public float a;
    
    public Color4f(float r, float g, float b) {
        this(r, g, b, 1.0f);
    }
    
    public Color4f(float r, float g, float b, float a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
}</pre>
<h2>Windowクラス</h2>
<p>先ほどつくったColor4fクラスを使います。<br />
つくってない場合は一つ一つr, g, bのfloat型変数を用意する必要がありますね。</p>
<pre>// 背景色
public Color4f bgColor new Color4f(0f, 0f, 0f);</pre>
<pre>public void init() {
    (省略)

    // リサイズをできるように設定
    GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

    GLFW.glfwMakeContextCurrent(window);
    GL.createCapabilities();

    // ビデオモードの取得
    GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

    (省略)
}</pre>
<pre>// 背景色をセット
public void setBgColor(float r, float g, float b) {
    this.bgColor = new Color4f(r, g, b);
}</pre>
<p>update関数に以下の処理を追加します。</p>
<pre>// 背景色を描画
GL11.glClearColor(bgColor.r, bgColor.g, bgColor.b, bgColor.a);
GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);</pre>
<p><img loading="lazy" width="413" height="241" class="alignnone wp-image-174 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21.png 413w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21-300x175.png 300w" sizes="(max-width: 413px) 100vw, 413px" /></p>
<p>どこかに以下のコードを埋め込むと黄色になると思います。</p>
<pre>window.setBgColor(1.0f, 1.0f, 0.0f);</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728173/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL】60FPSでループ処理 #3</title>
		<link>https://blog.pkom.ml/20220728169/</link>
					<comments>https://blog.pkom.ml/20220728169/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:34:10 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=169</guid>

					<description><![CDATA[Windowクラスへ以下の変数を追記しておく。 // 基準のFPS public int fps = 60; // FPS public double fpsCap = fps; public double time,  [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Windowクラスへ以下の変数を追記しておく。</p>
<pre>// 基準のFPS
public int fps = 60;

// FPS
public double fpsCap = fps;

public double time, processedTime;</pre>
<p>以下の関数も追記</p>
<pre>public boolean isUpdating() {
    double nextTime = getTime();
    double passedTime = nextTime - time;
    processedTime += passedTime;
    time = nextTime;

    while (processedTime &gt; 1.0/fpsCap) {
        processedTime -= 1.0/fpsCap;
        return true;
    }
    return false;
}

// 現在のFPSを取得
public double getFPS() {
    return fpsCap;
}

// 時間の取得
public double getTime() {
    return (double) System.nanoTime() / (double) 1000000000;
}</pre>
<p>Windowクラスのinit()関数の最後に以下の処理を追記</p>
<pre>time = getTime();</pre>
<p><img loading="lazy" width="281" height="447" class="alignnone wp-image-170 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19.png 281w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19-189x300.png 189w" sizes="(max-width: 281px) 100vw, 281px" /></p>
<h2>Mainクラス(動作確認)</h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {
        if (window.isUpdating()) {
            // イベントの更新
            window.update();

            System.out.println(window.getFPS());

            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img loading="lazy" width="257" height="346" class="alignnone wp-image-171 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20.png 257w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20-223x300.png 223w" sizes="(max-width: 257px) 100vw, 257px" /></p>
<p>現在のFPS(60.0)が表示されたら成功です。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728169/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL】キー、マウス入力 #2</title>
		<link>https://blog.pkom.ml/20220728160/</link>
					<comments>https://blog.pkom.ml/20220728160/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:10:32 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=160</guid>

					<description><![CDATA[次はキー、マウス入力となります。 キーの入力 // キーが押されているか public boolean isKeyDown(int key) { return GLFW.glfwGetKey(window, key) = [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>次はキー、マウス入力となります。</p>
<h2>キーの入力</h2>
<pre>// キーが押されているか
public boolean isKeyDown(int key) {
    return GLFW.glfwGetKey(window, key) == 1;
}

// キーが押されたか
public boolean isKeyPressed(int key) {
    return isKeyDown(key) &amp;&amp; !lastKeys[key];
}

// キーが離されたか
public boolean isKeyReleased(int key) {
    return !isKeyDown(key) &amp;&amp; lastKeys[key];
}</pre>
<p>上記のコードをWindowクラスに追加してください。<br />
GLFW.glfwGetKeyでは引数に指定されたキーが押されているか確認できます。1が返されると押されているということになるみたいですね。</p>
<h2>マウスの入力</h2>
<pre>// マウスが押されているか
public boolean isMouseDown(int button) {
    return GLFW.glfwGetMouseButton(window, button) == 1;
}

// マウスが押されたか
public boolean isMousePressed(int button) {
    return isMouseDown(button) &amp;&amp; !lastMouseButtons[button];
}

// マウスが離されたか
public boolean isMouseReleased(int button) {
    return !isMouseDown(button) &amp;&amp; lastMouseButtons[button];
}</pre>
<p>こちらもWindowクラスに付け足してください。<br />
上の項目の仕様と同じみたいです。</p>
<pre>// 最後に押されたキー
public boolean[] lastKeys = new boolean[GLFW.GLFW_KEY_LAST];

// 最後に押されたマウスボタン
public boolean[] lastMouseButtons = new boolean[GLFW.GLFW_MOUSE_BUTTON_LAST];</pre>
<p>上記の配列は上らへんに追記しておいてください。<br />
これがないと最後に押されたキーを記録できません。</p>
<pre>public void update() {
    for (int i = 0; i &lt; GLFW.GLFW_KEY_LAST; i++)
        lastKeys[i] = isKeyDown(i);
    for (int i = 0; i &lt; GLFW.GLFW_MOUSE_BUTTON_LAST; i++)
        lastMouseButtons[i] = isMouseDown(i);

    // マウスなど入力されたイベントを記録する
    GLFW.glfwPollEvents();
}</pre>
<p>update関数にlastKeys, lastMouseButtonsへ最後に押されたキーを保存する処理を追加します。</p>
<h2>マウスカーソルの座標</h2>
<pre>// マウスカーソルのX座標を取得
public double getMouseX() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, buffer, null);
    return buffer.get(0);
}

// マウスカーソルのY座標を取得
public double getMouseY() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, null, buffer);
    return buffer.get(0);
}</pre>
<p>※DoubleBufferはダブルバッファリングではありません。<br />
Double型のバッファにglfwGetCursorPos関数がマウスカーソルの位置を書き込むみたいですね。</p>
<h2>動作確認</h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {

        // イベントの更新
        window.update();

        if (window.isKeyPressed(GLFW.GLFW_KEY_A)) {
            System.out.println("Pressed A");
        }
        if (window.isKeyReleased(GLFW.GLFW_KEY_A)) {
            System.out.println("Released A");
        }
        if (window.isMousePressed(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Pressed Left");
            System.out.println("CursorPos: (" + window.getMouseX() + ", " + window.getMouseY() + ")");
        }
        if (window.isMouseReleased(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Released Left");
        }

        // バッファの更新
        window.swapBuffers();

    }
}</pre>
<p><img loading="lazy" width="233" height="270" class="alignnone wp-image-167 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-18.png" /></p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728160/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL】ウィンドウの作成 #1</title>
		<link>https://blog.pkom.ml/20220728158/</link>
					<comments>https://blog.pkom.ml/20220728158/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 10:33:02 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=158</guid>

					<description><![CDATA[適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。 Windowクラス package ml.pkom.lwjgl.tutorial; import org.lwjgl. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。</p>
<ul>
<li>Windowクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWVidMode;
import static org.lwjgl.system.MemoryUtil.*;

public class Window {

    public long window;

    // ウィンドウの横幅
    public int width = 640;

    // ウィンドウの縦幅
    public int height = 360;

    // ウィンドウのタイトル名
    public String title = "HogeHoge";

    public void init() {
        // GLFWの初期化
        GLFW.glfwInit();

        // ウィンドウを作成
        window = GLFW.glfwCreateWindow(width, height, title, NULL, NULL);

        // ウィンドウが見えるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);

        // リサイズをできるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

        // ビデオモードの取得
        GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

        // 画面のサイズを取得
        int screenWidth = videoMode.width();
        int screenHeight = videoMode.height();

        // ウィンドウの位置を中央へセットする
        GLFW.glfwSetWindowPos(window, (screenWidth - width) / 2, (screenHeight - height) / 2);

        // ウィンドウを表示
        GLFW.glfwShowWindow(window);
    }

    // 閉じるボタンが押されるとtrueを返す
    public boolean isClosed() {
        return GLFW.glfwWindowShouldClose(window);
    }

    public void update() {
        // マウスなど入力されたイベントを記録する
        GLFW.glfwPollEvents();
    }

    public void swapBuffers() {
        // カラーバッファ(色表示)を入れ替える
        GLFW.glfwSwapBuffers(window);
    }
}</pre>
<ul>
<li>Mainクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

public class Main {
    public static void main(String[] args) {
        Window window = new Window();

        // ウィンドウの初期化
        window.init();

        // 閉じるまでループ
        while (!window.isClosed()) {
            // イベントの更新
            window.update();
            
            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img loading="lazy" width="642" height="392" class="alignnone wp-image-163 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17.png 642w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17-300x183.png 300w" sizes="(max-width: 642px) 100vw, 642px" /></p>
<p>実行してみるとウィンドウが表示されました。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728158/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】セットアップ #0</title>
		<link>https://blog.pkom.ml/20220728153/</link>
					<comments>https://blog.pkom.ml/20220728153/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 09:57:58 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=153</guid>

					<description><![CDATA[JavaのLWJGLを学ぶついでに記事も書こうと思います。 日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。 私のコードは好きに使ってもらって構いません。 開発環境 環境 OS: W [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>JavaのLWJGLを学ぶついでに記事も書こうと思います。<br />
日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。<br />
私のコードは好きに使ってもらって構いません。</p>
<p><iframe loading="lazy" title="3D Game using LWJGL 3 Tutorial - #1 Making a Window" width="1107" height="623" src="https://www.youtube.com/embed/ISWcMXxl26s?list=PLaWuTOi9sDepAlbNEOXhjjFSo2WBkWOT2" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
<h2>開発環境</h2>
<h3 style="text-align: left;">環境</h3>
<p>OS: Windows 11<br />
IDE: Intellij IDEA<br />
Java: OpenJDK 17<br />
LWJGL: 3.3.1</p>
<h3>pom.xml</h3>
<p>以下のページでpom.xmlを生成します。</p>
<a rel="noopener" href="https://www.lwjgl.org/customize" title="LWJGL - Lightweight Java Game Library" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.lwjgl.org%2Fcustomize?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">LWJGL - Lightweight Java Game Library</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.lwjgl.org/customize" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.lwjgl.org</div></div></div></div></a>
<p>Releseの方を選択してみます。</p>
<p>pom.xmlを生成したいのでMavenを選びます。</p>
<p><img loading="lazy" width="151" height="158" class="alignnone wp-image-154 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-14.png" /></p>
<p>JOMLも追加しておきます。</p>
<p><img loading="lazy" width="253" height="189" class="alignnone wp-image-155 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-15.png" /></p>
<p>下の「DOWNLOAD POM.XML」か「COPY TO CLIPBOARD」でpom.xmlを自身のpom.xmlに貼り付けるか一部だけ貼り付けてください。</p>
<p><img loading="lazy" width="698" height="69" class="alignnone wp-image-156 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16.png 698w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16-300x30.png 300w" sizes="(max-width: 698px) 100vw, 698px" /></p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728153/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【Minecraft】無料でポート開放せずにサーバーを公開するツール</title>
		<link>https://blog.pkom.ml/20220723148/</link>
					<comments>https://blog.pkom.ml/20220723148/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Sat, 23 Jul 2022 07:41:35 +0000</pubDate>
				<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[サーバー]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[中継サーバー]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=148</guid>

					<description><![CDATA[ポート開放せずにサーバーを公開するツールを2つ紹介します。 ポート開放できない方もいると思いますし、手軽にゲームサーバーを公開できるので便利だと思います。 Minecraftで使う方は多いと思います。 仕組みは中継サーバ [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>ポート開放せずにサーバーを公開するツールを2つ紹介します。<br />
ポート開放できない方もいると思いますし、手軽にゲームサーバーを公開できるので便利だと思います。<br />
Minecraftで使う方は多いと思います。<br />
仕組みは中継サーバー(リレーサーバー)を利用しているらしいです。<br />
これを無料で提供してくれるのは有り難いですね。</p>
<h2>ゲームサーバー公開(ホスト)ツール | GameServerHostingTool</h2>
<p>こちらは日本産のゲームサーバー公開ツールです。</p>
<a rel="noopener" href="https://gsht.io/" title="ゲームサーバー公開(ホスト)ツール 配布ページ" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/e3204717414b9ee56d894957101fc2e7.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">ゲームサーバー公開(ホスト)ツール 配布ページ</div><div class="blogcard-snippet external-blogcard-snippet">ポート開放不要でゲームサーバーを外部に公開できるツールの配布ページ、紹介ページです。</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://files.esugo.net/mcsvrhost/site/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">files.esugo.net</div></div></div></div></a>
<h2>playit</h2>
<p>こちらは海外産のゲームサーバーを公開するためのツールです。</p>
<a rel="noopener" href="https://playit.gg/" title="making it easy to play games with friends" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/f705ea3b30b2906fcc6440efc7c05249.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">making it easy to play games with friends</div><div class="blogcard-snippet external-blogcard-snippet">We&#039;ve been making it easy to play games with friends since March 2020. Get a free static IP and ditch port forwarding.</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://playit.gg/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">playit.gg</div></div></div></div></a>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220723148/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【Minecraft】FabricでBukkitプラグインを動かすサーバーMOD「Cardboard」(FabricMC × SpigotMC)</title>
		<link>https://blog.pkom.ml/20220723134/</link>
					<comments>https://blog.pkom.ml/20220723134/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Sat, 23 Jul 2022 07:15:17 +0000</pubDate>
				<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[Bukkit]]></category>
		<category><![CDATA[FabricMC]]></category>
		<category><![CDATA[MOD]]></category>
		<category><![CDATA[MOD紹介]]></category>
		<category><![CDATA[PaperMC]]></category>
		<category><![CDATA[SpigotMC]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=134</guid>

					<description><![CDATA[はじめに FabricでBukkit/Spigot/Paperプラグインを動かすことができるCardboardをご紹介します。 1.16～1.18.2まで対応しているようで1.19は現在まだ出ていないようです。 クライア [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>はじめに</h2>
<p>FabricでBukkit/Spigot/Paperプラグインを動かすことができる<a href="https://www.curseforge.com/minecraft/mc-mods/cardboard">Cardboard</a>をご紹介します。<br />
1.16～1.18.2まで対応しているようで1.19は現在まだ出ていないようです。<br />
クライアント側でも使えるかもしれませんが、確認してません。</p>
<h2>DLリンク先</h2>
<p><span class="bold red">※Cardboardの前提MODである<a href="https://www.curseforge.com/minecraft/mc-mods/icommonlib">CommonLib</a>が必要です。</span><br />
前提MODとCardboardのURLを以下に載せておきます。</p>
<a rel="noopener" href="https://www.curseforge.com/minecraft/mc-mods/icommonlib" title="Attention Required! | Cloudflare" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.curseforge.com%2Fminecraft%2Fmc-mods%2Ficommonlib?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Attention Required! | Cloudflare</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.curseforge.com/minecraft/mc-mods/icommonlib" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.curseforge.com</div></div></div></div></a>
<a rel="noopener" href="https://www.curseforge.com/minecraft/mc-mods/cardboard" title="Attention Required! | Cloudflare" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.curseforge.com%2Fminecraft%2Fmc-mods%2Fcardboard?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Attention Required! | Cloudflare</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.curseforge.com/minecraft/mc-mods/cardboard" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.curseforge.com</div></div></div></div></a>
<h2>導入方法</h2>
<p>導入方法は至ってシンプルです。</p>
<p><a href="https://fabricmc.net/use/installer/">Fabric Installer</a>でFabricサーバーを建て、サーバーのmodsフォルダにFabric API、Cardboard、iCommonLibを入れるだけで動きます。以下で画像付きで説明します。</p>
<p><img loading="lazy" width="436" height="253" class="alignnone wp-image-136 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-8.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-8.png 436w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-8-300x174.png 300w" sizes="(max-width: 436px) 100vw, 436px" /></p>
<p>Fabric Installerを起動して1.18.2を選択してインストール先も指定し「インストール」ボタンをクリックしましょう。<br />
<img loading="lazy" width="419" height="237" class="alignnone wp-image-137 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-9.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-9.png 419w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-9-300x170.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-9-120x68.png 120w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-9-160x90.png 160w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-9-320x180.png 320w" sizes="(max-width: 419px) 100vw, 419px" /></p>
<p>「サーバー JAR をダウンロード」を必ずクリックし、「生成」ボタンをクリックしましょう。<br />
一度生成されたbatファイルもしくはshファイルを起動し、自動的に閉じると思うので生成されたeula.txtを開き、eula=falseをeula=trueにして保存しましょう。<br />
<img loading="lazy" width="282" height="106" class="alignnone wp-image-138 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-10.png" /></p>
<p>modsフォルダに以下のmodを入れておきます。</p>
<p><img loading="lazy" width="610" height="99" class="alignnone wp-image-135 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-7.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-7.png 610w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-7-300x49.png 300w" sizes="(max-width: 610px) 100vw, 610px" /></p>
<p>pluginsフォルダは起動すると勝手に生成されますが、ついでに予めpluginsフォルダを作ってBukkitプラグインを放り込んでおきます。<br />
試しに<a href="https://github.com/ucchyocean/LunaChat/releases">LunaChat</a>を入れてみました。</p>
<p><img loading="lazy" width="630" height="93" class="alignnone wp-image-139 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-11.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-11.png 630w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-11-300x44.png 300w" sizes="(max-width: 630px) 100vw, 630px" /></p>
<p>LunaChatは上手く動作しませんでした。</p>
<p><img loading="lazy" width="856" height="512" class="alignnone wp-image-140 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-12.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-12.png 856w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-12-300x179.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-12-768x459.png 768w" sizes="(max-width: 856px) 100vw, 856px" /></p>
<h2>最後に</h2>
<p>Beta版ですので、必ず安定する訳ではないと思います。<br />
現在1.18.2のアップデートへ取り組んでいると書かれているので1.18.2より1.18.1が安定するかもですね。<br />
<img loading="lazy" width="633" height="542" class="alignnone wp-image-141 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-13.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-13.png 633w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-13-300x257.png 300w" sizes="(max-width: 633px) 100vw, 633px" /><br />
正式リリース版もいつか出てほしいですね。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220723134/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【CurseForge】アップロードしたファイルを削除する方法</title>
		<link>https://blog.pkom.ml/20220721119/</link>
					<comments>https://blog.pkom.ml/20220721119/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 21 Jul 2022 06:45:21 +0000</pubDate>
				<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[CurseForge]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=119</guid>

					<description><![CDATA[初めに 間違って別のMODをアップロードしてしまい、削除したかったのですが、削除ボタンがありませんでした。そこでフォーラムで調べてみたところこれを参考にしてみると削除できました。 Attention Required!  [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>初めに</h2>
<p><img loading="lazy" width="913" height="318" class="alignnone wp-image-121 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-1.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-1.png 913w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-1-300x104.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-1-768x267.png 768w" sizes="(max-width: 913px) 100vw, 913px" /></p>
<p>間違って別のMODをアップロードしてしまい、削除したかったのですが、削除ボタンがありませんでした。そこでフォーラムで調べてみたところこれを参考にしてみると削除できました。</p>
<a rel="noopener" href="https://minecraft.curseforge.com/forums/modding-java-edition/java-mods/ideas/5014-deleting-files-of-a-project" title="Attention Required! | Cloudflare" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fminecraft.curseforge.com%2Fforums%2Fmodding-java-edition%2Fjava-mods%2Fideas%2F5014-deleting-files-of-a-project?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Attention Required! | Cloudflare</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://minecraft.curseforge.com/forums/modding-java-edition/java-mods/ideas/5014-deleting-files-of-a-project" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">minecraft.curseforge.com</div></div></div></div></a>
<h2>画像付きの手順</h2>
<p>削除したいファイルにチェックします。</p>
<p><img loading="lazy" width="258" height="340" class="alignnone wp-image-122 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-2.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-2.png 258w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-2-228x300.png 228w" sizes="(max-width: 258px) 100vw, 258px" /></p>
<p>Archiveボタンをクリック。</p>
<p><img loading="lazy" width="608" height="337" class="alignnone wp-image-123 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3.png 608w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3-300x166.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3-120x68.png 120w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3-160x90.png 160w" sizes="(max-width: 608px) 100vw, 608px" /></p>
<p>ダイアログのような画面が出てくると思うのでArchive Filesをクリック。<img loading="lazy" width="249" height="228" class="alignnone wp-image-124 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-4.png" /></p>
<p>StatusをArchivedの項目に変える。<br />
そしてファイルの詳細画面を開くとDeleteボタンが表示されているのでクリックすると削除できます。</p>
<p><img loading="lazy" width="914" height="607" class="alignnone wp-image-125 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-5.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-5.png 914w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-5-300x199.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-5-768x510.png 768w" sizes="(max-width: 914px) 100vw, 914px" /></p>
<h2>簡易的に手順をまとめる</h2>
<ol>
<li>削除したいファイルのチェックボックスにチェックを入れる。</li>
<li>「Archive」ボタンをクリックする。</li>
<li>「Archive Files」ボタンをクリックする。</li>
<li>Statusを「Archived」に変更する。</li>
<li>ファイルのリンクを開く。</li>
<li>「Delete」ボタンをクリックする。</li>
</ol>
<h2>最後に</h2>
<p>少し面倒かな～と思いますが、誤ってファイルを削除してしまうことはないかと思います。<br />
この頃はCurseForge以外にModrinthというModを配布するためのサイトが出てきたみたいですね</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220721119/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【Minecraft】VoxelMap非公式Fabric版 1.18〜1.19の配布先</title>
		<link>https://blog.pkom.ml/20220720115/</link>
					<comments>https://blog.pkom.ml/20220720115/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Wed, 20 Jul 2022 12:11:40 +0000</pubDate>
				<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[FabricMC]]></category>
		<category><![CDATA[MOD]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=115</guid>

					<description><![CDATA[有志の方が以下のdiscordサーバーでVoxelMapを非公式でメンテナンスしてくださってました。 Refresh-MC Fabric/Spigot: https://discord.gg/GCKZ9Kgqny]]></description>
										<content:encoded><![CDATA[<p>有志の方が以下のdiscordサーバーでVoxelMapを非公式でメンテナンスしてくださってました。</p>
<p>Refresh-MC Fabric/Spigot: <a href="https://discord.gg/GCKZ9Kgqny">https://discord.gg/GCKZ9Kgqny</a></p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220720115/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>無料のWikiソフトウェアを比較してみる</title>
		<link>https://blog.pkom.ml/20220720111/</link>
					<comments>https://blog.pkom.ml/20220720111/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Wed, 20 Jul 2022 12:07:44 +0000</pubDate>
				<category><![CDATA[DokuWiki]]></category>
		<category><![CDATA[GROWI]]></category>
		<category><![CDATA[MediaWiki]]></category>
		<category><![CDATA[PukiWiki]]></category>
		<category><![CDATA[ソフトウェア]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[CMS]]></category>
		<category><![CDATA[Web]]></category>
		<category><![CDATA[Wiki]]></category>
		<category><![CDATA[Wikiソフトウェア]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=111</guid>

					<description><![CDATA[はじめに ここでのWikiソフトウェアは、誰でも編集できるWebサイトということを指します。 あくまで私の意見ですので、鵜呑みにせず・・ 今回は無料のWikiソフトウェアを比較しようと思います。 Wikiソフトウェア P [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>はじめに</h2>
<p>ここでのWikiソフトウェアは、誰でも編集できるWebサイトということを指します。<br />
あくまで私の意見ですので、鵜呑みにせず・・<br />
今回は無料のWikiソフトウェアを比較しようと思います。</p>
<h3>Wikiソフトウェア</h3>
<h4>PukiWiki</h4>
<p>ところどころで使われている日本産のWikiソフトウェア<br />
掲示板、バグトラッキングシステム、メモ、ブログとしても使えたり。<br />
wikiwiki.jpやatwiki.jpのベースだったり。<br />
一時期、開発が止まっていたものの、今でもメンテナンスされ続けています。</p>
<p>言語: PHP<br />
開発: PukiWiki Development Team<br />
誕生: 2001年<br />
ライセンス: GPLv2+</p>
<a rel="noopener" href="https://pukiwiki.osdn.jp/" title="FrontPage - PukiWiki-official" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fpukiwiki.osdn.jp%2F?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">FrontPage - PukiWiki-official</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://pukiwiki.osdn.jp/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">pukiwiki.osdn.jp</div></div></div></div></a>
<h5>メリット</h5>
<p>データベース不要<br />
簡単に設置可能<br />
ページの管理が簡単<br />
プラグインが豊富<br />
機能は比較的多い</p>
<h5>デメリット</h5>
<p>アカウント管理機能がない(プラグインを使えば可能)<br />
デザインが古臭い(スキンを使えば可能)<br />
WYSIWYG編集未対応(プラグインを使えば可能)</p>
<h4>DokuWiki</h4>
<p>こちらもPukiWikiと同様、データベース不要というのが特徴的ですね。<br />
大量のプラグインもあります。<br />
ドキュメント管理には向いています。</p>
<p>言語: PHP<br />
開発: Andreas Gohr<br />
誕生: 2004年<br />
ライセンス: GPLv2</p>
<a rel="noopener" href="https://www.dokuwiki.org/" title="dokuwiki [DokuWiki]" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.dokuwiki.org%2F?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">dokuwiki [DokuWiki]</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.dokuwiki.org/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.dokuwiki.org</div></div></div></div></a>
<h5>メリット</h5>
<p>データベース不要<br />
アカウント管理機能<br />
ファイルの管理が直接DokuWikiでできる<br />
多言語対応<br />
スパム対策機能</p>
<h5>デメリット</h5>
<p>日本人の利用者はあまりいない<br />
Markdown未対応(プラグインを使えば可能)<br />
WYSIWYG編集未対応(プラグインを使えば可能)</p>
<h4>MediaWiki</h4>
<p>あのWikipediaで使われているソフトウェアですね。<br />
デザインも綺麗で見慣れています。<br />
ただ、直感で操作できる訳ではないでしょうね、</p>
<p>言語: PHP<br />
開発: Wikimedia Foundation Inc.<br />
誕生: 2001年<br />
ライセンス: GPL</p>
<a rel="noopener" href="https://www.mediawiki.org/" title="MediaWiki" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/baa5aa3d42a4f5cea6bcba78108be849.jpg" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">MediaWiki</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.mediawiki.org/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.mediawiki.org</div></div></div></div></a>
<h5>メリット</h5>
<p>アカウント管理機能<br />
多言語対応<br />
スパム対策機能<br />
とても多機能<br />
WYSIWYG編集</p>
<h5>デメリット</h5>
<p>処理が重たい<br />
Markdown未対応(プラグインを使えば可能)<br />
管理が大変</p>
<h4>GROWI</h4>
<p>Crowiをベースとしたウィキソフトウェア。<br />
Markdownが使える。<br />
クラウドサービスも行っているようだ。</p>
<a rel="noopener" href="https://growi.org/" title="OSS開発wikiツールのGROWI | 快適な情報共有を、全ての人へ" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/c73cfccf0479301e9b71a134bb42458c.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">OSS開発wikiツールのGROWI | 快適な情報共有を、全ての人へ</div><div class="blogcard-snippet external-blogcard-snippet">GROWIはWESEEKが開発を行い、MITライセンスで公開しているオープンソースソフトウェアです。 dockerへのインストールやオンプレ対応も可能です。 開発を手伝っていただけるコントリビューター、開発してみたいインターン生も募集しています。</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://growi.org/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">growi.org</div></div></div></div></a>
<p>言語: JavaScript (Node.js)<br />
開発: 株式会社WESEEK<br />
誕生: 2017年<br />
ライセンス: MIT</p>
<h5>メリット</h5>
<p>Markdown<br />
グループ・アカウント管理機能<br />
編集機能が多い<br />
UML記述機能<br />
管理が簡単<br />
デメリット<br />
プラグインが少ない<br />
少し重たい</p>
<h2>おわりに</h2>
<p>私はやっぱりPukiWikiが好みです。<br />
プラグイン開発も楽しいですし、管理もしやすい。<br />
何よりナビバーの操作性が高い点ですね。<br />
もちろんMediaWikiやGrowiなどもいいんですけどね。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220720111/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
