<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>プログラミング  |  ぴたぶろぐ</title>
	<atom:link href="https://blog.pkom.ml/category/%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.pkom.ml</link>
	<description>自分が書きたいことを書くだけのブログ</description>
	<lastBuildDate>Thu, 28 Jul 2022 14:53:17 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.1</generator>

<image>
	<url>https://blog.pkom.ml/wp-content/uploads/2022/07/cropped-109135739-1-32x32.png</url>
	<title>プログラミング  |  ぴたぶろぐ</title>
	<link>https://blog.pkom.ml</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>【LWJGL】描画処理 &#8211; その1(背景色) #4</title>
		<link>https://blog.pkom.ml/20220728173/</link>
					<comments>https://blog.pkom.ml/20220728173/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:53:06 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=173</guid>

					<description><![CDATA[目次 Color4fクラスWindowクラス Color4fクラス 色を保存するためのクラスをつくっておきます。 なくてもいいんですが、私はつくる派です。 package ml.pkom.lwjgl.tutorial;  [&#8230;]]]></description>
										<content:encoded><![CDATA[
  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-2" checked><label class="toc-title" for="toc-checkbox-2">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">Color4fクラス</a></li><li><a href="#toc2" tabindex="0">Windowクラス</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">Color4fクラス</span></h2>
<p>色を保存するためのクラスをつくっておきます。<br />
なくてもいいんですが、私はつくる派です。</p>
<pre>package ml.pkom.lwjgl.tutorial;

public class Color4f {
    public float r;
    public float g;
    public float b;
    public float a;
    
    public Color4f(float r, float g, float b) {
        this(r, g, b, 1.0f);
    }
    
    public Color4f(float r, float g, float b, float a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
}</pre>
<h2><span id="toc2">Windowクラス</span></h2>
<p>先ほどつくったColor4fクラスを使います。<br />
つくってない場合は一つ一つr, g, bのfloat型変数を用意する必要がありますね。</p>
<pre>// 背景色
public Color4f bgColor new Color4f(0f, 0f, 0f);</pre>
<pre>public void init() {
    (省略)

    // リサイズをできるように設定
    GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

    GLFW.glfwMakeContextCurrent(window);
    GL.createCapabilities();

    // ビデオモードの取得
    GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

    (省略)
}</pre>
<pre>// 背景色をセット
public void setBgColor(float r, float g, float b) {
    this.bgColor = new Color4f(r, g, b);
}</pre>
<p>update関数に以下の処理を追加します。</p>
<pre>// 背景色を描画
GL11.glClearColor(bgColor.r, bgColor.g, bgColor.b, bgColor.a);
GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);</pre>
<p><img loading="lazy" width="413" height="241" class="alignnone wp-image-174 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21.png 413w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21-300x175.png 300w" sizes="(max-width: 413px) 100vw, 413px" /></p>
<p>どこかに以下のコードを埋め込むと黄色になると思います。</p>
<pre>window.setBgColor(1.0f, 1.0f, 0.0f);</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728173/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL】60FPSでループ処理 #3</title>
		<link>https://blog.pkom.ml/20220728169/</link>
					<comments>https://blog.pkom.ml/20220728169/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:34:10 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=169</guid>

					<description><![CDATA[Windowクラスへ以下の変数を追記しておく。 // 基準のFPS public int fps = 60; // FPS public double fpsCap = fps; public double time,  [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Windowクラスへ以下の変数を追記しておく。</p>
<pre>// 基準のFPS
public int fps = 60;

// FPS
public double fpsCap = fps;

public double time, processedTime;</pre>
<p>以下の関数も追記</p>
<pre>public boolean isUpdating() {
    double nextTime = getTime();
    double passedTime = nextTime - time;
    processedTime += passedTime;
    time = nextTime;

    while (processedTime &gt; 1.0/fpsCap) {
        processedTime -= 1.0/fpsCap;
        return true;
    }
    return false;
}

// 現在のFPSを取得
public double getFPS() {
    return fpsCap;
}

// 時間の取得
public double getTime() {
    return (double) System.nanoTime() / (double) 1000000000;
}</pre>
<p>Windowクラスのinit()関数の最後に以下の処理を追記</p>
<pre>time = getTime();</pre>
<p><img loading="lazy" width="281" height="447" class="alignnone wp-image-170 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19.png 281w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19-189x300.png 189w" sizes="(max-width: 281px) 100vw, 281px" /></p>
<h2>Mainクラス(動作確認)</h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {
        if (window.isUpdating()) {
            // イベントの更新
            window.update();

            System.out.println(window.getFPS());

            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img loading="lazy" width="257" height="346" class="alignnone wp-image-171 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20.png 257w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20-223x300.png 223w" sizes="(max-width: 257px) 100vw, 257px" /></p>
<p>現在のFPS(60.0)が表示されたら成功です。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728169/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL】キー、マウス入力 #2</title>
		<link>https://blog.pkom.ml/20220728160/</link>
					<comments>https://blog.pkom.ml/20220728160/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:10:32 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=160</guid>

					<description><![CDATA[次はキー、マウス入力となります。 目次 キーの入力マウスの入力マウスカーソルの座標動作確認 キーの入力 // キーが押されているか public boolean isKeyDown(int key) { return G [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>次はキー、マウス入力となります。</p>

  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-6" checked><label class="toc-title" for="toc-checkbox-6">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">キーの入力</a></li><li><a href="#toc2" tabindex="0">マウスの入力</a></li><li><a href="#toc3" tabindex="0">マウスカーソルの座標</a></li><li><a href="#toc4" tabindex="0">動作確認</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">キーの入力</span></h2>
<pre>// キーが押されているか
public boolean isKeyDown(int key) {
    return GLFW.glfwGetKey(window, key) == 1;
}

// キーが押されたか
public boolean isKeyPressed(int key) {
    return isKeyDown(key) &amp;&amp; !lastKeys[key];
}

// キーが離されたか
public boolean isKeyReleased(int key) {
    return !isKeyDown(key) &amp;&amp; lastKeys[key];
}</pre>
<p>上記のコードをWindowクラスに追加してください。<br />
GLFW.glfwGetKeyでは引数に指定されたキーが押されているか確認できます。1が返されると押されているということになるみたいですね。</p>
<h2><span id="toc2">マウスの入力</span></h2>
<pre>// マウスが押されているか
public boolean isMouseDown(int button) {
    return GLFW.glfwGetMouseButton(window, button) == 1;
}

// マウスが押されたか
public boolean isMousePressed(int button) {
    return isMouseDown(button) &amp;&amp; !lastMouseButtons[button];
}

// マウスが離されたか
public boolean isMouseReleased(int button) {
    return !isMouseDown(button) &amp;&amp; lastMouseButtons[button];
}</pre>
<p>こちらもWindowクラスに付け足してください。<br />
上の項目の仕様と同じみたいです。</p>
<pre>// 最後に押されたキー
public boolean[] lastKeys = new boolean[GLFW.GLFW_KEY_LAST];

// 最後に押されたマウスボタン
public boolean[] lastMouseButtons = new boolean[GLFW.GLFW_MOUSE_BUTTON_LAST];</pre>
<p>上記の配列は上らへんに追記しておいてください。<br />
これがないと最後に押されたキーを記録できません。</p>
<pre>public void update() {
    for (int i = 0; i &lt; GLFW.GLFW_KEY_LAST; i++)
        lastKeys[i] = isKeyDown(i);
    for (int i = 0; i &lt; GLFW.GLFW_MOUSE_BUTTON_LAST; i++)
        lastMouseButtons[i] = isMouseDown(i);

    // マウスなど入力されたイベントを記録する
    GLFW.glfwPollEvents();
}</pre>
<p>update関数にlastKeys, lastMouseButtonsへ最後に押されたキーを保存する処理を追加します。</p>
<h2><span id="toc3">マウスカーソルの座標</span></h2>
<pre>// マウスカーソルのX座標を取得
public double getMouseX() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, buffer, null);
    return buffer.get(0);
}

// マウスカーソルのY座標を取得
public double getMouseY() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, null, buffer);
    return buffer.get(0);
}</pre>
<p>※DoubleBufferはダブルバッファリングではありません。<br />
Double型のバッファにglfwGetCursorPos関数がマウスカーソルの位置を書き込むみたいですね。</p>
<h2><span id="toc4">動作確認</span></h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {

        // イベントの更新
        window.update();

        if (window.isKeyPressed(GLFW.GLFW_KEY_A)) {
            System.out.println("Pressed A");
        }
        if (window.isKeyReleased(GLFW.GLFW_KEY_A)) {
            System.out.println("Released A");
        }
        if (window.isMousePressed(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Pressed Left");
            System.out.println("CursorPos: (" + window.getMouseX() + ", " + window.getMouseY() + ")");
        }
        if (window.isMouseReleased(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Released Left");
        }

        // バッファの更新
        window.swapBuffers();

    }
}</pre>
<p><img loading="lazy" width="233" height="270" class="alignnone wp-image-167 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-18.png" /></p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728160/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL】ウィンドウの作成 #1</title>
		<link>https://blog.pkom.ml/20220728158/</link>
					<comments>https://blog.pkom.ml/20220728158/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 10:33:02 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=158</guid>

					<description><![CDATA[適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。 Windowクラス package ml.pkom.lwjgl.tutorial; import org.lwjgl. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。</p>
<ul>
<li>Windowクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWVidMode;
import static org.lwjgl.system.MemoryUtil.*;

public class Window {

    public long window;

    // ウィンドウの横幅
    public int width = 640;

    // ウィンドウの縦幅
    public int height = 360;

    // ウィンドウのタイトル名
    public String title = "HogeHoge";

    public void init() {
        // GLFWの初期化
        GLFW.glfwInit();

        // ウィンドウを作成
        window = GLFW.glfwCreateWindow(width, height, title, NULL, NULL);

        // ウィンドウが見えるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);

        // リサイズをできるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

        // ビデオモードの取得
        GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

        // 画面のサイズを取得
        int screenWidth = videoMode.width();
        int screenHeight = videoMode.height();

        // ウィンドウの位置を中央へセットする
        GLFW.glfwSetWindowPos(window, (screenWidth - width) / 2, (screenHeight - height) / 2);

        // ウィンドウを表示
        GLFW.glfwShowWindow(window);
    }

    // 閉じるボタンが押されるとtrueを返す
    public boolean isClosed() {
        return GLFW.glfwWindowShouldClose(window);
    }

    public void update() {
        // マウスなど入力されたイベントを記録する
        GLFW.glfwPollEvents();
    }

    public void swapBuffers() {
        // カラーバッファ(色表示)を入れ替える
        GLFW.glfwSwapBuffers(window);
    }
}</pre>
<ul>
<li>Mainクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

public class Main {
    public static void main(String[] args) {
        Window window = new Window();

        // ウィンドウの初期化
        window.init();

        // 閉じるまでループ
        while (!window.isClosed()) {
            // イベントの更新
            window.update();
            
            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img loading="lazy" width="642" height="392" class="alignnone wp-image-163 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17.png 642w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17-300x183.png 300w" sizes="(max-width: 642px) 100vw, 642px" /></p>
<p>実行してみるとウィンドウが表示されました。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728158/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】セットアップ #0</title>
		<link>https://blog.pkom.ml/20220728153/</link>
					<comments>https://blog.pkom.ml/20220728153/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 09:57:58 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=153</guid>

					<description><![CDATA[JavaのLWJGLを学ぶついでに記事も書こうと思います。 日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。 私のコードは好きに使ってもらって構いません。 目次 開発環境環境pom. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>JavaのLWJGLを学ぶついでに記事も書こうと思います。<br />
日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。<br />
私のコードは好きに使ってもらって構いません。</p>
<p><iframe loading="lazy" title="3D Game using LWJGL 3 Tutorial - #1 Making a Window" width="1107" height="623" src="https://www.youtube.com/embed/ISWcMXxl26s?list=PLaWuTOi9sDepAlbNEOXhjjFSo2WBkWOT2" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>

  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-10" checked><label class="toc-title" for="toc-checkbox-10">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">開発環境</a><ol><li><a href="#toc2" tabindex="0">環境</a></li><li><a href="#toc3" tabindex="0">pom.xml</a></li></ol></li></ol>
    </div>
  </div>

<h2><span id="toc1">開発環境</span></h2>
<h3 style="text-align: left;"><span id="toc2">環境</span></h3>
<p>OS: Windows 11<br />
IDE: Intellij IDEA<br />
Java: OpenJDK 17<br />
LWJGL: 3.3.1</p>
<h3><span id="toc3">pom.xml</span></h3>
<p>以下のページでpom.xmlを生成します。</p>
<a rel="noopener" href="https://www.lwjgl.org/customize" title="LWJGL - Lightweight Java Game Library" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.lwjgl.org%2Fcustomize?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">LWJGL - Lightweight Java Game Library</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.lwjgl.org/customize" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.lwjgl.org</div></div></div></div></a>
<p>Releseの方を選択してみます。</p>
<p>pom.xmlを生成したいのでMavenを選びます。</p>
<p><img loading="lazy" width="151" height="158" class="alignnone wp-image-154 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-14.png" /></p>
<p>JOMLも追加しておきます。</p>
<p><img loading="lazy" width="253" height="189" class="alignnone wp-image-155 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-15.png" /></p>
<p>下の「DOWNLOAD POM.XML」か「COPY TO CLIPBOARD」でpom.xmlを自身のpom.xmlに貼り付けるか一部だけ貼り付けてください。</p>
<p><img loading="lazy" width="698" height="69" class="alignnone wp-image-156 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16.png 698w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16-300x30.png 300w" sizes="(max-width: 698px) 100vw, 698px" /></p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728153/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>JitPackでJava 8以外を使う方法</title>
		<link>https://blog.pkom.ml/2022072064/</link>
					<comments>https://blog.pkom.ml/2022072064/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Tue, 19 Jul 2022 15:30:51 +0000</pubDate>
				<category><![CDATA[GitHub]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[JitPack]]></category>
		<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=64</guid>

					<description><![CDATA[FabricMCのMOD開発でライブラリをJitPackにあげたかったのだが、ビルドでエラーが発生してしまった。そこでjitpack.ymlでjdkを指定したところ、一時期動いたのだが、また動作しなくなったため、以下のよ [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>FabricMCのMOD開発でライブラリをJitPackにあげたかったのだが、ビルドでエラーが発生してしまった。そこでjitpack.ymlで<a class="keyword" href="http://d.hatena.ne.jp/keyword/jdk">jdk</a>を指定したところ、一時期動いたのだが、また動作しなくなったため、以下のようにbefore_install:をymlに追加すると解決する。<br />
jitpack.ymlは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ直下に配置する。</p>
<p><strong>jitpack.yml</strong></p>
<pre>before_install:
  - <a class="keyword" href="http://d.hatena.ne.jp/keyword/wget">wget</a> <a href="https://github.com/sormuras/bach/raw/master/install-jdk.sh">https://github.com/sormuras/bach/raw/master/install-jdk.sh</a>
  - source ./install-<a class="keyword" href="http://d.hatena.ne.jp/keyword/jdk">jdk</a>.sh --feature 17 --license <a class="keyword" href="http://d.hatena.ne.jp/keyword/GPL">GPL</a>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/jdk">jdk</a>:
  - openjdk17</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/2022072064/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【FabricMC】Illegal character ((CTRL-CHAR, code 31)):&#8230;の対処法</title>
		<link>https://blog.pkom.ml/2022072062/</link>
					<comments>https://blog.pkom.ml/2022072062/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Tue, 19 Jul 2022 15:29:27 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[FabricMC]]></category>
		<category><![CDATA[MOD]]></category>
		<category><![CDATA[MOD開発]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=62</guid>

					<description><![CDATA[FabricでMOD開発していると以下のようなエラーが出てしまいました。 Illegal character ((CTRL-CHAR, code 31)): only regular white space (\r, \ [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>FabricでMOD開発していると以下のようなエラーが出てしまいました。</p>
<pre>Illegal character ((CTRL-CHAR, code 31)): only regular white space (\r, \n, \t) is allowed between tokens 333333333333333
    at [Source: UNKNOWN; line: 1, column: 2]</pre>
<h3>解決法</h3>
<p>以下のコマンドを実行することにより解決しました。</p>
<p>gradlew &#8211;refresh-dependencies</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/2022072062/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【WordPress】GitHub Pagesを利用して静的化したWordPressをほぼ無料で公開する</title>
		<link>https://blog.pkom.ml/2022072049/</link>
					<comments>https://blog.pkom.ml/2022072049/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Tue, 19 Jul 2022 15:20:12 +0000</pubDate>
				<category><![CDATA[Git]]></category>
		<category><![CDATA[GitHub]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[WordPress]]></category>
		<category><![CDATA[サーバー]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[ソフトウェア]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[GitHub Pages]]></category>
		<category><![CDATA[WordPressプラグイン]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=49</guid>

					<description><![CDATA[元々、このブログ以前のブログはレンタルサーバーで動かしていました。 あまり更新しなかったため、必要性はないと感じ、新たにWordPressをローカルへ導入し、静的化した後、GitHub Pagesで運用することを考えまし [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>元々、このブログ以前のブログはレンタルサーバーで動かしていました。<br />
あまり更新しなかったため、必要性はないと感じ、新たにWordPressをローカルへ導入し、静的化した後、GitHub Pagesで運用することを考えました。<br />
この２日間かけて、ようやく少し使えるような形になりました。<br />
今回は、WordPressプラグインである、Simply Staticを使って静的化したいと思います。<br />
Cocoonテーマを利用しているので少し変わるかもしれません。<br />
私はWordPressに関しては完全に素人なので申し訳ないです。</p>

  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-16" checked><label class="toc-title" for="toc-checkbox-16">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">手順</a></li><li><a href="#toc2" tabindex="0">Simply Staticの導入</a></li><li><a href="#toc3" tabindex="0">GitHub の設定</a></li><li><a href="#toc4" tabindex="0">おまけ</a><ol><li><a href="#toc5" tabindex="0">検索を機能させる</a></li><li><a href="#toc6" tabindex="0">コメントを機能させる</a></li></ol></li></ol>
    </div>
  </div>

<h2><span id="toc1">手順</span></h2>
<p>簡単にまとめておきます。</p>
<ol>
<li style="list-style-type: none;">
<ol>
<li>Simply Staticを導入する</li>
<li>適当にSimply Static用のフォルダをつくる (つくったフォルダをsimplystatic/とします)</li>
<li>WPの管理メニューのSimply Staticのページから静的ファイルを生成する</li>
<li>simplystatic/をGitリポジトリにする (simplystatic下で以下のコマンドを実行)
<pre>git init
git add *
git commit -m "first"
git remote add origin https://github.com/(ユーザー名)/(リポジトリ名).git
git push origin main</pre>
</li>
<li><a href="https://www.lotusdigital.jp/b/web/wordpress%E9%9D%99%E7%9A%84%E5%8C%96%E3%81%AE%E3%81%9F%E3%82%81simply-static%E3%82%92%E4%BD%BF%E7%94%A8/">conv_for_simply.rb</a>という日本語フォルダを変換してくれるGemをsimplystatic/につくる</li>
<li>WordPressのルートにbatファイル(push.bat)をつくる
<pre>cd ./simplystatic/
ruby conv_for_simply.rb
git add *
git commit -m "update"
git push</pre>
</li>
<li>batファイルを実行する</li>
<li>GitHub Pagesの設定をする</li>
</ol>
</li>
</ol>
<h2><span id="toc2">Simply Staticの導入</span></h2>
<p><img loading="lazy" class="alignnone wp-image-51 size-large" src="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-234530-1024x254.png" alt="" width="1024" height="254" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-234530-1024x254.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-234530-300x75.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-234530-768x191.png 768w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-234530-1536x382.png 1536w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-234530.png 1723w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p>※インストール後、必ず<span class="bold red">有効化</span>しておきましょう。</p>
<p>こちらのプラグインは静的化するためのプラグインです。<br />
静的化とは静的ファイルであるHTML、JS、CSS、画像など簡単に言えばアクセスしてもソースが変化しないクライアントサイドのファイルに変換することを指します。<br />
つまり、PHPが生成したソースをHTMLファイルとして保存します。</p>
<p>適当にSimply Static用のフォルダをつくります。つくったフォルダをsimplystatic/とします。</p>
<p>正しく導入できれば、WordPressの管理メニューのサイドバーにSimply Staticという項目が追加されていると思います。<br />
<img loading="lazy" class="alignnone size-medium wp-image-52" src="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235147-300x147.png" alt="" width="300" height="147" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235147-300x147.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235147.png 334w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p>まず、設定を選びましょう。<br />
<img loading="lazy" class="alignnone wp-image-54 size-large" src="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235507-1024x726.png" alt="" width="1024" height="726" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235507-1024x726.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235507-300x213.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235507-768x544.png 768w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235507.png 1205w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p>配送方法はローカルディレクトリに設定してあげましょう。<br />
ローカルディレクトリの入力欄にはつくったフォルダであるsimplystatic/(任意)のパスを指定します。</p>
<p><img loading="lazy" class="alignnone wp-image-53 size-large" src="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235402-1024x258.png" alt="" width="1024" height="258" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235402-1024x258.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235402-300x76.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235402-768x194.png 768w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-19-235402.png 1244w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p>生成を選択し、<span class="bold blue">静的ファイルを生成する</span>をクリックしましょう。</p>
<p>待機すると生成されると思います。<br />
クソ長いですよね、、、一分もかかりました&#8230;(笑)</p>
<h2><span id="toc3">GitHub の設定</span></h2>
<p><img loading="lazy" class="alignnone wp-image-55 size-large" src="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-20-000111-1024x700.png" alt="" width="1024" height="700" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-20-000111-1024x700.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-20-000111-300x205.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-20-000111-768x525.png 768w, https://blog.pkom.ml/wp-content/uploads/2022/07/スクリーンショット-2022-07-20-000111.png 1141w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p>GitHubのリポジトリでSettingsを開き、Pagesの項目に移動してください。<br />
Sourceのブランチをmainで選択してSaveをクリックしましょう。<br />
これで完了なのですが、Custom domainも私は設定しました。</p>
<h2><span id="toc4">おまけ</span></h2>
<h3><span id="toc5">検索を機能させる</span></h3>
<p><strong><span class="marker-red">※こちらの検索機能に関しては完全に機能しているわけではありませんのでご了承ください</span></strong></p>
<p>静的化したら検索機能が動作しないんですよ。まあ当たり前なことです。<br />
検索機能はPHPでつくられており、サーバーサイドで動的に処理するものなのです。<br />
つまり、クライアント側で処理できるようにインデックス化されたものも静的化しないとなりません。<br />
WordPressにはRest APIがあります。<br />
APIで生成されたjsonを静的化してしまえばよいという考えになりました。<br />
めちゃくちゃなことしてますが、私はこうするしかないと思いました。<br />
そのためのPHPスクリプトをここにおいておきます。<br />
名前は適当ですが、なんでもいいです。</p>
<ul>
<li>push.php</li>
</ul>
<pre>&lt;?php
define('URL', dirname((empty($_SERVER['HTTPS']) ? 'http://' : 'https://') . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']) . "/");
define('DIR', "simplystatic/");

function save_url2static($path, $ext = 'json') {
$src = file_get_contents(URL . $path);
if (!file_exists(DIR . $path))
mkdir(DIR . $path, 0777, true);
$src = str_replace(str_replace('/', '\/', URL), '/', $src);
file_put_contents(DIR . $path . "/index." . $ext, $src);
}

save_url2static("wp-json/wp/v2/posts");
save_url2static("wp-json/wp/v2/pages");
save_url2static("wp-json/wp/v2/media");
save_url2static("wp-json/wp/v2/comments");
save_url2static("wp-json/wp/v2/taxonomies");
save_url2static("wp-json/wp/v2/taxonomies");
save_url2static("static-json/categories");

if (!file_exists(DIR . 'conv_for_simply.rb'))
copy('conv_for_simply.rb', DIR . 'conv_for_simply.rb');
copy('client.js', DIR . 'client.js');

echo exec('push.bat') . '&lt;br /&gt;';
echo "pushed!&lt;br /&gt;";
exit;</pre>
<ul>
<li>client.js</li>
</ul>
<pre>var $client_lang = {
search_result: "“$1” の検索結果",
search_in_site: "サイト内を検索",
posts_not_found: "投稿が見つかりませんでした。"
};
var $url = new URL(window.location.href);
var $params = $url.searchParams;
var $htmlSetted = false;

function apprStr($str) {
$str = $str.toLowerCase();
$str = $str.replace(/(&lt;([^&gt;]+)&gt;)/gi, '');
$str = $str.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function($m) {
return String.fromCharCode($m.charCodeAt(0) - 0xFEE0);
});
$str = $str.replace(/[\u30a1-\u30f6]/g, function($m) {
return String.fromCharCode($m.charCodeAt(0) - 0x60);
});
return $str;
}

function getMeta($metaProperty) {
var $metas = document.getElementsByTagName('meta');
for (let $j = 0; $j &lt; $metas.length; $j++) {
if ($metas[$j].getAttribute('property') === $metaProperty) {
return $metas[$j].getAttribute('content');
}
}
}

if ($params.has('s') ) {
var $s = $params.get('s');
var $isFound = false;
var $html = `
&lt;h1 id="archive-title" class="archive-title"&gt;&lt;span class="fa fa-search" aria-hidden="true"&gt;&lt;/span&gt;"${$s}"&lt;/h1&gt;
&lt;form class="search-box input-box" method="get" action="/"&gt;
&lt;input type="text" placeholder="${$client_lang['search_in_site']}" name="s" class="search-edit" aria-label="input" value="${$s}"&gt;
&lt;button type="submit" class="search-submit" aria-label="button"&gt;&lt;span class="fa fa-search" aria-hidden="true"&gt;&lt;/span&gt;&lt;/button&gt;
&lt;/form&gt;
&lt;div id="list" class="list ect-entry-card front-page-type-index"&gt;
`;
document.title = $client_lang['search_result'].replace('$1', $s) + " | " + getMeta("og:site_name");

var $categories_name = new Array();
fetch('./static-json/categories/index.json') // /index.json
.then(($response) =&gt; $response.json())
.then(($data) =&gt; {
if ($data !== undefined)
Object.keys($data).forEach($key =&gt; {
var $item = $data[$key];
$categories_name[$item.term_id] = $item.name;
});
fetch('./wp-json/wp/v2/posts/index.json')
.then(($response) =&gt; $response.json())
.then(($data) =&gt; {
if ($data !== undefined)
$data.forEach($item =&gt; {
if (apprStr($item.title.rendered).indexOf(apprStr($s)) != -1 || apprStr($item.content.rendered).indexOf(apprStr($s)) != -1) {
$isFound = true;

var $categories_html;
$item.categories.forEach($id =&gt; {
$categories_html += '&lt;span class="entry-category"&gt;' + $categories_name[$id] + '&lt;/span&gt;';
});
var $post_date = $item.date.replace('-', '.');
$post_date = $post_date.substr(0, $post_date.indexOf('T'));

$html += `
&lt;a href="${$item.link}" class="entry-card-wrap a-wrap border-element cf" title="${$item.title.rendered}"&gt;
&lt;article&gt;
&lt;figure class="entry-card-thumb card-thumb e-card-thumb"&gt;
&lt;img data-src="/wp-content/themes/cocoon-master/images/no-image-320.png" alt="" class="no-image entry-card-thumb-image list-no-image lozad lozad-img" loading="lazy" width="320" height="180" /&gt;&lt;noscript&gt;&lt;img src="/wp-content/themes/cocoon-master/images/no-image-320.png" alt="" class="no-image entry-card-thumb-image list-no-image" width="320" height="180" /&gt;&lt;/noscript&gt; &lt;span class="cat-label cat-label-13"&gt;Minecraft&lt;/span&gt; &lt;/figure&gt;&lt;!-- /.entry-card-thumb --&gt;
&lt;div class="entry-card-content card-content e-card-content"&gt;
&lt;h2 class="entry-card-title card-title e-card-title" itemprop="headline"&gt;${$item.title.rendered}&lt;/h2&gt;
&lt;div class="entry-card-snippet card-snippet e-card-snippet"&gt;
${$item.excerpt.rendered}
&lt;/div&gt;
&lt;div class="entry-card-meta card-meta e-card-meta"&gt;
&lt;div class="entry-card-info e-card-info"&gt;
&lt;span class="post-date"&gt;&lt;span class="fa fa-clock-o" aria-hidden="true"&gt;&lt;/span&gt; ${$post_date}&lt;/span&gt;
&lt;/div&gt;
&lt;div class="entry-card-categorys"&gt;${$categories_html}&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;!-- /.entry-card-content --&gt;
&lt;/article&gt;
&lt;/a&gt;
`;
}
});
if ($isFound === false) {
$html += `
&lt;div class="posts-not-found"&gt;
&lt;h2&gt;NOT FOUND&lt;/h2&gt;
&lt;p&gt;${$client_lang['posts_not_found']}&lt;/p&gt;
&lt;/div&gt;
`;
}
$html += `&lt;/div&gt;&lt;!-- .list --&gt;`;
document.addEventListener("DOMContentLoaded", function() {
if ($htmlSetted === false) {
document.getElementById("main").innerHTML = $html;
$htmlSetted = true;
}
});
window.addEventListener("load", function() {
if ($htmlSetted === false) {
document.getElementById("main").innerHTML = $html;
$htmlSetted = true;
}
});
});
});
}
</pre>
<p>テーマのheader.phpの&lt;/head&gt;前に以下のコードを加える</p>
<pre>&lt;script src="./client.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</pre>
<h3><span id="toc6">コメントを機能させる</span></h3>
<p>Utterancesというものを使い、GitHubのIssueをサイトに埋め込み、コメント欄として利用します。<br />
<a href="https://utteranc.es/">https://utteranc.es/</a><br />
テーマのcomments.phpを書き換えます。</p>
<pre>&lt;?php //コメントエリア
/**
* Cocoon WordPress Theme
* @author: yhira
* @link: https://wp-cocoon.com/
* @license: http://www.gnu.org/licenses/gpl-2.0.html GPL v2 or later
*/

if ( !defined( 'ABSPATH' ) ) exit;

if ( is_comment_allow() || have_comments() ): ?&gt;
&lt;div id="utteranc_comment"&gt;
&lt;!-- comment area --&gt;
<span class="bold red marker-red">ここにコード</span>
&lt;/div&gt;
&lt;?php endif ?&gt;</pre>
<p>生成したコードを「ここにコード」に貼り付けましょう。</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/2022072049/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>C++でWindowsのGUIアプリケーションを作成する</title>
		<link>https://blog.pkom.ml/2022071820/</link>
					<comments>https://blog.pkom.ml/2022071820/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Mon, 18 Jul 2022 05:42:01 +0000</pubDate>
				<category><![CDATA[C++]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[.NET Framework]]></category>
		<category><![CDATA[GUIアプリケーション]]></category>
		<category><![CDATA[Windows]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=20</guid>

					<description><![CDATA[WinAPIを使わずに.NET Frameworkでアプリケーションを作成します。 他人が見てもわかるように書いてるつもりですが、一応自分用にメモ書きということで、 目次 注意手順1.「CLR 空のプロジェクト (.NE [&#8230;]]]></description>
										<content:encoded><![CDATA[<p id="410eaa92-a133-4d22-b2ff-f7988c13015c" data-pm-slice="0 0 []">WinAPIを使わずに.NET Frameworkでアプリケーションを作成します。<br />
他人が見てもわかるように書いてるつもりですが、一応自分用にメモ書きということで、</p>

  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-18" checked><label class="toc-title" for="toc-checkbox-18">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">注意</a></li><li><a href="#toc2" tabindex="0">手順</a><ol><li><a href="#toc3" tabindex="0">1.「CLR 空のプロジェクト (.NET Framework)」選択</a></li><li><a href="#toc4" tabindex="0">2. 項目を入力して作成ボタンをクリック</a></li><li><a href="#toc5" tabindex="0">3. 「新しい項目の追加(W)&#8230;」を選択して「Windows フォーム」を追加する</a></li><li><a href="#toc6" tabindex="0">4. 一旦ソリューション閉じて再度開く</a></li><li><a href="#toc7" tabindex="0">5. MyForm.cppを編集</a></li></ol></li><li><a href="#toc8" tabindex="0">終わりに</a></li><li><a href="#toc9" tabindex="0">参考サイト</a></li></ol>
    </div>
  </div>

<h2 id="8fe951df-0fab-4576-8d24-e5f3f37f309b"><span id="toc1">注意</span></h2>
<ul id="2c7807c9-b42b-4f2b-b63d-d5974d4383be">
<li>Visual Studio 2019</li>
<li>.NET Framework</li>
<li>C++</li>
<li>Windows</li>
</ul>
<h2 id="8a4bda6c-489f-4e68-bc11-8ee45b87e415"><span id="toc2">手順</span></h2>
<ul id="e47c2395-d37e-4153-82b1-447ee515ab49">
<li>「CLR 空のプロジェクト (.NET Framework)」→「プロジェクト」→「新しい項目の追加」→「Windows フォーム」→ソリューションを閉じる→ソリューションを再度開く→5番目の手順のコードをコピペして編集</li>
</ul>
<h3 id="3a29dad9-d228-41aa-8497-944beefb2f33"><span id="toc3">1.「CLR 空のプロジェクト (.NET Framework)」選択</span></h3>
<h3 id="6a114117-dc48-4388-85d0-68d4c097d92d"><span id="toc4">2. 項目を入力して作成ボタンをクリック</span></h3>
<h3 id="cfc3a432-3c9d-42f1-a284-7a1e808aca1a"><span id="toc5">3. 「新しい項目の追加(W)&#8230;」を選択して「Windows フォーム」を追加する</span></h3>
<h3 id="8e48d3c6-ffe6-4885-a91c-fcdc77ce6d52"><span id="toc6">4. 一旦ソリューション閉じて再度開く</span></h3>
<h3 id="1bc58e6a-97da-4760-8b68-1a0d2d99cdde"><span id="toc7">5. MyForm.cppを編集</span></h3>
<p id="8954704a-9513-48f4-b281-e74b47bf4b02">MyForm.cppを以下のように編集した。</p>
<pre id="7bd1471d-e228-4ee8-b14d-2d2d6415d72a"><code>#include "MyForm.h"

using namespace Project1;

int WinMain() {
	MyForm^ form = gcnew MyForm();
	form-&gt;ShowDialog();
	return 0;
}</code></pre>
<p id="3cab28ea-3e51-486c-9a9b-92f91813d79b">これをしないとエントリーポイントの関数が存在しないため、起動できない。<br />
using namespaceのProject1については使うネームスペース名(プロジェクト名)にすること。<br />
WinMain()ではなくmain()で関数定義するとコンソールが表示されるので注意</p>
<h2 id="2382b1c6-1ee5-4f0e-9ad0-1124c29c273f"><span id="toc8">終わりに</span></h2>
<p id="1bc8cade-71e7-43bf-9ea3-b1aca97a1598">これで楽しくC++でGUIがつくれちゃいます！！</p>
<h2 id="07fc5dd3-2965-40c7-a277-cf4dd94a3ce5"><span id="toc9">参考サイト</span></h2>
<ul id="0a35c340-725a-4fa1-b159-805c8683b06c">
<li><a href="https://syokado.exblog.jp/29398798/">https://syokado.exblog.jp/29398798/</a></li>
<li><a href="http://y-okamoto-psy1949.la.coocan.jp/VCpp/OnVSCpp2019/">http://y-okamoto-psy1949.la.coocan.jp/VCpp/OnVSCpp2019/</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/2022071820/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
