<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Java  |  ぴたぶろぐ</title>
	<atom:link href="https://blog.pitan76.net/category/%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/java/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.pitan76.net</link>
	<description>自分が書きたいことを書くだけのブログ</description>
	<lastBuildDate>Sat, 24 Sep 2022 13:28:34 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2.2</generator>

<image>
	<url>https://blog.pitan76.net/wp-content/uploads/2022/07/cropped-109135739-1-32x32.png</url>
	<title>Java  |  ぴたぶろぐ</title>
	<link>https://blog.pitan76.net</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>【Architectury API】Architectury APIで開発するための下準備 #0</title>
		<link>https://blog.pitan76.net/20220924300/</link>
					<comments>https://blog.pitan76.net/20220924300/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Sat, 24 Sep 2022 13:02:39 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[Architectury API]]></category>
		<category><![CDATA[FabricMC]]></category>
		<category><![CDATA[MinecraftForge]]></category>
		<category><![CDATA[QuiltMC]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=300</guid>

					<description><![CDATA[目次 Architectury APIとは開発環境構築Yarnのマッピングを使う (任意) Architectury APIとは Architectury API - Minecraft Modding Wikimcmo [&#8230;]]]></description>
										<content:encoded><![CDATA[
  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-2" checked><label class="toc-title" for="toc-checkbox-2">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">Architectury APIとは</a></li><li><a href="#toc2" tabindex="0">開発環境構築</a></li><li><a href="#toc3" tabindex="0">Yarnのマッピングを使う (任意)</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">Architectury APIとは</span></h2>
<a rel="noopener" href="https://mcmodding.jp/modding/index.php/Architectury_API" title="Architectury API - Minecraft Modding Wiki" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fmcmodding.jp%2Fmodding%2Findex.php%2FArchitectury_API?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Architectury API - Minecraft Modding Wiki</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://mcmodding.jp/modding/index.php/Architectury_API" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">mcmodding.jp</div></div></div></div></a>
<p>Minecraft Modding Wikiによると「MODのクロスプラットフォーム開発(マルチプラットフォーム開発)をするための中間APIである。つまり、FabricとMinecraft Forge、QuiltのMODを同時に開発することができる。」と書かれています。</p>
<p>MOD開発に置いては非常に便利なものなのです。</p>
<h2><span id="toc2">開発環境構築</span></h2>
<a rel="noopener" href="https://wikichree.com/pitan76/?Diary/2022-07-15" title="Diary/2022-07-15 - Pitan&#x20;Mod&#x20;Wiki" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwikichree.com%2Fpitan76%2F%3FDiary%2F2022-07-15?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Diary/2022-07-15 - Pitan&#x20;Mod&#x20;Wiki</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://wikichree.com/pitan76/?Diary/2022-07-15" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">wikichree.com</div></div></div></div></a>
<p>上記の私のPitan Mod Wikiというサイトで開発環境の構築方法を記載しています。<br />
IntelliJ IDEAを使えばすぐに構築できます。</p>
<p>私は以下のような感じに入力しました。<br />
FabricでMCPitanLibというライブラリを僕は作ってたんですけど、これを機にArchitecturyでライブラリを作り直そうと思います。<br />
ミックスインを使うのでUse Mixinsもチェックします。(推奨)</p>
<p><img decoding="async" width="795" height="653" class="alignnone wp-image-308 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-16.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-16.png 795w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-16-300x246.png 300w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-16-768x631.png 768w" sizes="(max-width: 795px) 100vw, 795px" /><br />
ついでにGitHubでリポジトリもつくっておきます。</p>
<p><img decoding="async" width="745" height="952" class="alignnone wp-image-306 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-14.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-14.png 745w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-14-235x300.png 235w" sizes="(max-width: 745px) 100vw, 745px" /></p>
<p>うむ、javaファイルが生成されてますなー</p>
<p><img decoding="async" width="1920" height="1033" class="alignnone wp-image-309 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-17.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-17.png 1920w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-17-300x161.png 300w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-17-1024x551.png 1024w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-17-768x413.png 768w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-17-1536x826.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /></p>
<p>さて、ハイライト(ソースに色が付く)されるまで待ちますか。<br />
ちなみになぜMCPitanLibarchかというとMCPitanLib+Architectury APIという考えで付けたんですけどセンスありませんよね。。。許してください&#8230;w</p>
<p>いやーそれにしても長いですねえ&#8230;</p>
<p><img decoding="async" width="1920" height="1033" class="alignnone wp-image-310 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-18.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-18.png 1920w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-18-300x161.png 300w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-18-1024x551.png 1024w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-18-768x413.png 768w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-18-1536x826.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /></p>
<p>お、来ましたね。</p>
<p><img decoding="async" width="249" height="219" class="alignnone wp-image-312 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-20.png" /></p>
<p>ここからクライアントとサーバーを起動できますね！</p>
<p>ちなみにビルドは右のGradleからTasks→build→buildを実行するとForge、Fabricのjarがそれぞれ生成されます。最強ですね！</p>
<p><img decoding="async" width="456" height="264" class="alignnone wp-image-313 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-21.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-21.png 456w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-21-300x174.png 300w, https://blog.pitan76.net/wp-content/uploads/2022/09/Pasted-21-120x68.png 120w" sizes="(max-width: 456px) 100vw, 456px" /></p>
<h2><span id="toc3">Yarnのマッピングを使う (任意)</span></h2>
<p>gradle.propertiesを早速少しいじります。私の場合は以下のようになってます。</p>
<pre>org.gradle.jvmargs=-Xmx1G
minecraft_version=1.18.2
archives_base_name=mcpitanlibarch
mod_version=1.0.0
maven_group=ml.pkom
architectury_version=4.9.84
fabric_loader_version=0.14.9
fabric_api_version=0.58.0+1.18.2
forge_version=1.18.2-40.1.80</pre>
<pre>org.gradle.jvmargs=-Xmx3G

minecraft_version=1.18.2
archives_base_name=mcpitanlibarch
mod_version=1.0.0
maven_group=ml.pkom

# https://www.curseforge.com/minecraft/mc-mods/architectury-api
architectury_version=4.9.84

# https://fabricmc.net/develop/
fabric_loader_version=0.14.9
yarn_mappings=1.18.2+build.4
fabric_api_version=0.58.0+1.18.2

# https://files.minecraftforge.net/net/minecraftforge/forge/
forge_version=1.18.2-40.1.80</pre>
<p>このように書き換えました。<br />
Yarnを使うのでyarn_mappingsってのを追加しています。<br />
fabric_loader_versionとfabric_api_versionは<a href="https://fabricmc.net/develop/">https://fabricmc.net/develop/</a>でコピーしたもののままだとloader_versionとかなってるのでfabric_を先端に加えましょうね。</p>
<p>Yarnにしたい方はbuild.gradleを開きましょう。。</p>
<pre>dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    // The following line declares the mojmap mappings, you may use other mappings as well
    mappings loom.officialMojangMappings()
    // The following line declares the yarn mappings you may select this one as well.
    // mappings "net.fabricmc:yarn:@YARN_MAPPINGS@:v2"
}</pre>
<p>mappings loom.officialMojangMappings()をコメントアウトし、mappings &#8220;net.fabricmc:yarn:@YARN_MAPPINGS@:v2&#8243;のコメントを外しましょう。</p>
<p>@YARN_MAPPINGS@は<span class="pl-pse">${</span>rootProject.yarn_mappings<span class="pl-pse">}にしちゃいましょう。</span></p>
<pre>dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    // The following line declares the mojmap mappings, you may use other mappings as well
    // mappings loom.officialMojangMappings()
    // The following line declares the yarn mappings you may select this one as well.
    mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
}</pre>
<p>officialMojangMappingsなんて使わずにFabricのYarnMappingsを薦めます！</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/20220924300/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】描画処理 – その2(図形の描画) #5</title>
		<link>https://blog.pitan76.net/20220904274/</link>
					<comments>https://blog.pitan76.net/20220904274/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Sun, 04 Sep 2022 00:59:44 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=274</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/20220904274/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>GitHub Pagesを利用してMavenリポジトリをつくる</title>
		<link>https://blog.pitan76.net/20220729178/</link>
					<comments>https://blog.pitan76.net/20220729178/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Fri, 29 Jul 2022 03:18:02 +0000</pubDate>
				<category><![CDATA[Git]]></category>
		<category><![CDATA[GitHub]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[GitHub Pages]]></category>
		<category><![CDATA[Maven]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=178</guid>

					<description><![CDATA[目次 はじめに設置したMavenリポジトリPHPスクリプト前提条件やり方maven.phpの仕様さいごに関連リンク はじめに FabricMCのMOD開発でライブラリをつくったのでMavenリポジトリをGitHubのリポ [&#8230;]]]></description>
										<content:encoded><![CDATA[
  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-7" checked><label class="toc-title" for="toc-checkbox-7">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">はじめに</a><ol><li><a href="#toc2" tabindex="0">設置したMavenリポジトリ</a></li><li><a href="#toc3" tabindex="0">PHPスクリプト</a></li><li><a href="#toc4" tabindex="0">前提条件</a></li><li><a href="#toc5" tabindex="0">やり方</a></li><li><a href="#toc6" tabindex="0">maven.phpの仕様</a></li></ol></li><li><a href="#toc7" tabindex="0">さいごに</a><ol><li><a href="#toc8" tabindex="0">関連リンク</a></li></ol></li></ol>
    </div>
  </div>

<h2><span id="toc1">はじめに</span></h2>
<p>FabricMCのMOD開発でライブラリをつくったのでMavenリポジトリをGitHubのリポジトリへ設置し、GitHub Pagesで公開してみました。</p>
<h3><span id="toc2">設置したMavenリポジトリ</span></h3>
<a rel="noopener" href="https://maven.pkom.ml/" title="Index of /" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fmaven.pkom.ml%2F?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Index of /</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://maven.pkom.ml/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">maven.pkom.ml</div></div></div></div></a>
<h3 id="content_1_2"><span id="toc3">PHPスクリプト</span></h3>
<p>PHPでMavenリポジトリをアップロードし、自動的にディレクトリリストのHTMLを生成し、GitHubへプッシュするスクリプトを書いてみました。</p>
<a rel="noopener" href="https://github.com/Pitan76/maven/raw/main/maven.php" title="Index of {$displaydir}" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fgithub.com%2FPitan76%2Fmaven%2Fraw%2Fmain%2Fmaven.php?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Index of {$displaydir}</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://github.com/Pitan76/maven/raw/main/maven.php" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">github.com</div></div></div></div></a>
<h3 id="content_1_3"><span id="toc4">前提条件</span></h3>
<ul class="list1 list-indent1">
<li>PHPを動作させるWebサーバーをインストールしておく(XAMPP、LAMP等)</li>
<li>Gitを入れておく</li>
<li>GitHubのアカウントをつくっておく</li>
<li>Mavenリポジトリとして使うGitリポジトリをGitHubにつくっておく</li>
</ul>
<h3><span id="toc5">やり方</span></h3>
<p>Pitan Mod Wikiの文章をそのまま載せておきます。</p>
<a rel="noopener" href="https://wikichree.com/pitan76/?Diary/2022-07-14" title="Diary/2022-07-14 - Pitan&#x20;Mod&#x20;Wiki" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwikichree.com%2Fpitan76%2F%3FDiary%2F2022-07-14?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Diary/2022-07-14 - Pitan&#x20;Mod&#x20;Wiki</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://wikichree.com/pitan76/?Diary/2022-07-14" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">wikichree.com</div></div></div></div></a>
<p>1. GitHubのGitリポジトリを開き、[Settings]→[Pages]→SourceがNoneになっているのでbranchを選択する<br />
2. 特定のhtdocsにmavenリポジトリとするフォルダをつくる。(htdocs/maven/にしました。)<br />
3. つくったフォルダにmaven.phpを放り込む。(今回はhtdocs/maven/maven.phpに放り込みました。)<br />
4. つくったフォルダでターミナルを開き、<strong>git init</strong>を実行<br />
5. <strong>git add *</strong>を実行<br />
6. <strong>git commit -m &#8220;(任意)&#8221;</strong>を実行<br />
7. <strong>git branch -M main</strong>を実行<br />
8. <strong>git remote add origin https://github.com/(ユーザー名)/(リポジトリ名).git</strong>を実行<br />
9. <strong>git push -u origin main</strong>を実行<br />
10. ブラウザでmaven.phpを開き、jarをアップロードする。(私の場合はlocalhost/maven/maven.phpとなっています)</p>
<h3 id="content_1_5"><span id="toc6">maven.phpの仕様</span></h3>
<ul class="list1 list-indent1">
<li>アップロード後、自動でgit push</li>
<li>ハッシュファイルを作成する</li>
<li>ディレクトリリストのindex.htmlを自動生成する</li>
</ul>
<p>ここからは任意ですが、Customドメインもついでに設定しておきます<br />
Custom domainで自分のドメインを設定しました。</p>
<h2><span id="toc7">さいごに</span></h2>
<p>MavenリポジトリをGitHub Pagesに設置し、ライブラリを公開できて面白かったです。<br />
正しい方法ではないと思うので外部の関連サイトも載せておきます。</p>
<h3><span id="toc8">関連リンク</span></h3>
<a rel="noopener" href="https://weblabo.oscasierra.net/maven-deploy-github/" title="GitHubにMavenリポジトリを構築してライブラリを公開する方法 |" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pitan76.net/wp-content/uploads/cocoon-resources/blog-card-cache/35d08b22d0390132263fef83e824cac8.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">GitHubにMavenリポジトリを構築してライブラリを公開する方法 |</div><div class="blogcard-snippet external-blogcard-snippet">本稿では、Maven リポジトリを GitHub 上に作成して jar ライブラリを配布する方法について解説します。</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://weblabo.oscasierra.net/maven-deploy-github/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">weblabo.oscasierra.net</div></div></div></div></a>
<a rel="noopener" href="https://com4dc.hatenablog.com/entry/2020/03/30/224953" title="GithubのRepositoryをmavenリポジトリとして使う - com4dc’s blog" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pitan76.net/wp-content/uploads/cocoon-resources/blog-card-cache/7f1b87261cff8d08d94b7a2dcc02f4f3.jpg" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">GithubのRepositoryをmavenリポジトリとして使う - com4dc’s blog</div><div class="blogcard-snippet external-blogcard-snippet">なんで今さら 数年前に開発が停止してしまっているコードをフォークして利用したい 元のソースのApache License 2.0。フォークしたコードはOSSとして公開しないといけない？（うろ覚え・・・） ソースコードをそのまま組み込むのはNGそうな気がする？ 修正と再頒布そのものは禁止されていない（はず maven の...</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://com4dc.hatenablog.com/entry/2020/03/30/224953" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">com4dc.hatenablog.com</div></div></div></div></a>
<a rel="noopener" href="https://qiita.com/koduki/items/6babcc6f2b233da96e06" title="2020年のMavenリポジトリの作り方 - Qiita" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-9f5428127621718a910c8b63951390ad.png?ixlib=rb-4.0.0&#038;w=1200&#038;mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTkxNiZ0eHQ9MjAyMCVFNSVCOSVCNCVFMyU4MSVBRU1hdmVuJUUzJTgzJUFBJUUzJTgzJTlEJUUzJTgyJUI4JUUzJTgzJTg4JUUzJTgzJUFBJUUzJTgxJUFFJUU0JUJEJTlDJUUzJTgyJThBJUU2JTk2JUI5JnR4dC1jb2xvcj0lMjMyMTIxMjEmdHh0LWZvbnQ9SGlyYWdpbm8lMjBTYW5zJTIwVzYmdHh0LXNpemU9NTYmdHh0LWNsaXA9ZWxsaXBzaXMmdHh0LWFsaWduPWxlZnQlMkN0b3Amcz1jOWJkN2RhOTRhYmY5ZjI5MTQ3OTE4ZmI2ODFjYThkOA&#038;mark-x=142&#038;mark-y=112&#038;blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTYxNiZ0eHQ9JTQwa29kdWtpJnR4dC1jb2xvcj0lMjMyMTIxMjEmdHh0LWZvbnQ9SGlyYWdpbm8lMjBTYW5zJTIwVzYmdHh0LXNpemU9MzYmdHh0LWFsaWduPWxlZnQlMkN0b3Amcz01N2QxMjJjOGVkNzgwMmM0ZGM0NzhmNzUzYTVjN2M2Yw&#038;blend-x=142&#038;blend-y=491&#038;blend-mode=normal&#038;s=5065ef28c6bc083f309e217ff68622f0" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">2020年のMavenリポジトリの作り方 - Qiita</div><div class="blogcard-snippet external-blogcard-snippet">

はじめに

Javaのエンジニアであれば何だかんだでMavenリポジトリを使うことは非常に多いと思います。Gradleであっても使いますしね。

OSSなどはセントラルリポジトリから落とすとして自作のライブラリの管理をどうしていま...</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://qiita.com/koduki/items/6babcc6f2b233da96e06" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">qiita.com</div></div></div></div></a>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/20220729178/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】描画処理 &#8211; その1(背景色) #4</title>
		<link>https://blog.pitan76.net/20220728173/</link>
					<comments>https://blog.pitan76.net/20220728173/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:53:06 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=173</guid>

					<description><![CDATA[目次 Color4fクラスWindowクラス Color4fクラス 色を保存するためのクラスをつくっておきます。 なくてもいいんですが、私はつくる派です。 package ml.pkom.lwjgl.tutorial;  [&#8230;]]]></description>
										<content:encoded><![CDATA[
  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-9" checked><label class="toc-title" for="toc-checkbox-9">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">Color4fクラス</a></li><li><a href="#toc2" tabindex="0">Windowクラス</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">Color4fクラス</span></h2>
<p>色を保存するためのクラスをつくっておきます。<br />
なくてもいいんですが、私はつくる派です。</p>
<pre>package ml.pkom.lwjgl.tutorial;

public class Color4f {
    public float r;
    public float g;
    public float b;
    public float a;
    
    public Color4f(float r, float g, float b) {
        this(r, g, b, 1.0f);
    }
    
    public Color4f(float r, float g, float b, float a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
}</pre>
<h2><span id="toc2">Windowクラス</span></h2>
<p>先ほどつくったColor4fクラスを使います。<br />
つくってない場合は一つ一つr, g, bのfloat型変数を用意する必要がありますね。</p>
<pre>// 背景色
public Color4f bgColor new Color4f(0f, 0f, 0f);</pre>
<pre>public void init() {
    (省略)

    // リサイズをできるように設定
    GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

    GLFW.glfwMakeContextCurrent(window);
    GL.createCapabilities();

    // ビデオモードの取得
    GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

    (省略)
}</pre>
<pre>// 背景色をセット
public void setBgColor(float r, float g, float b) {
    this.bgColor = new Color4f(r, g, b);
}</pre>
<p>update関数に以下の処理を追加します。</p>
<pre>// 背景色を描画
GL11.glClearColor(bgColor.r, bgColor.g, bgColor.b, bgColor.a);
GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);</pre>
<p><img decoding="async" width="413" height="241" class="alignnone wp-image-174 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-21.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-21.png 413w, https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-21-300x175.png 300w" sizes="(max-width: 413px) 100vw, 413px" /></p>
<p>どこかに以下のコードを埋め込むと黄色になると思います。</p>
<pre>window.setBgColor(1.0f, 1.0f, 0.0f);</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/20220728173/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】60FPSでループ処理 #3</title>
		<link>https://blog.pitan76.net/20220728169/</link>
					<comments>https://blog.pitan76.net/20220728169/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:34:10 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=169</guid>

					<description><![CDATA[Windowクラスへ以下の変数を追記しておく。 // 基準のFPS public int fps = 60; // FPS public double fpsCap = fps; public double time,  [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Windowクラスへ以下の変数を追記しておく。</p>
<pre>// 基準のFPS
public int fps = 60;

// FPS
public double fpsCap = fps;

public double time, processedTime;</pre>
<p>以下の関数も追記</p>
<pre>public boolean isUpdating() {
    double nextTime = getTime();
    double passedTime = nextTime - time;
    processedTime += passedTime;
    time = nextTime;

    while (processedTime &gt; 1.0/fpsCap) {
        processedTime -= 1.0/fpsCap;
        return true;
    }
    return false;
}

// 現在のFPSを取得
public double getFPS() {
    return fpsCap;
}

// 時間の取得
public double getTime() {
    return (double) System.nanoTime() / (double) 1000000000;
}</pre>
<p>Windowクラスのinit()関数の最後に以下の処理を追記</p>
<pre>time = getTime();</pre>
<p><img decoding="async" width="281" height="447" class="alignnone wp-image-170 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-19.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-19.png 281w, https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-19-189x300.png 189w" sizes="(max-width: 281px) 100vw, 281px" /></p>
<h2>Mainクラス(動作確認)</h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {
        if (window.isUpdating()) {
            // イベントの更新
            window.update();

            System.out.println(window.getFPS());

            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img decoding="async" width="257" height="346" class="alignnone wp-image-171 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-20.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-20.png 257w, https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-20-223x300.png 223w" sizes="(max-width: 257px) 100vw, 257px" /></p>
<p>現在のFPS(60.0)が表示されたら成功です。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/20220728169/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】キー、マウス入力 #2</title>
		<link>https://blog.pitan76.net/20220728160/</link>
					<comments>https://blog.pitan76.net/20220728160/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:10:32 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=160</guid>

					<description><![CDATA[次はキー、マウス入力となります。 目次 キーの入力マウスの入力マウスカーソルの座標動作確認 キーの入力 // キーが押されているか public boolean isKeyDown(int key) { return G [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>次はキー、マウス入力となります。</p>

  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-13" checked><label class="toc-title" for="toc-checkbox-13">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">キーの入力</a></li><li><a href="#toc2" tabindex="0">マウスの入力</a></li><li><a href="#toc3" tabindex="0">マウスカーソルの座標</a></li><li><a href="#toc4" tabindex="0">動作確認</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">キーの入力</span></h2>
<pre>// キーが押されているか
public boolean isKeyDown(int key) {
    return GLFW.glfwGetKey(window, key) == 1;
}

// キーが押されたか
public boolean isKeyPressed(int key) {
    return isKeyDown(key) &amp;&amp; !lastKeys[key];
}

// キーが離されたか
public boolean isKeyReleased(int key) {
    return !isKeyDown(key) &amp;&amp; lastKeys[key];
}</pre>
<p>上記のコードをWindowクラスに追加してください。<br />
GLFW.glfwGetKeyでは引数に指定されたキーが押されているか確認できます。1が返されると押されているということになるみたいですね。</p>
<h2><span id="toc2">マウスの入力</span></h2>
<pre>// マウスが押されているか
public boolean isMouseDown(int button) {
    return GLFW.glfwGetMouseButton(window, button) == 1;
}

// マウスが押されたか
public boolean isMousePressed(int button) {
    return isMouseDown(button) &amp;&amp; !lastMouseButtons[button];
}

// マウスが離されたか
public boolean isMouseReleased(int button) {
    return !isMouseDown(button) &amp;&amp; lastMouseButtons[button];
}</pre>
<p>こちらもWindowクラスに付け足してください。<br />
上の項目の仕様と同じみたいです。</p>
<pre>// 最後に押されたキー
public boolean[] lastKeys = new boolean[GLFW.GLFW_KEY_LAST];

// 最後に押されたマウスボタン
public boolean[] lastMouseButtons = new boolean[GLFW.GLFW_MOUSE_BUTTON_LAST];</pre>
<p>上記の配列は上らへんに追記しておいてください。<br />
これがないと最後に押されたキーを記録できません。</p>
<pre>public void update() {
    for (int i = 0; i &lt; GLFW.GLFW_KEY_LAST; i++)
        lastKeys[i] = isKeyDown(i);
    for (int i = 0; i &lt; GLFW.GLFW_MOUSE_BUTTON_LAST; i++)
        lastMouseButtons[i] = isMouseDown(i);

    // マウスなど入力されたイベントを記録する
    GLFW.glfwPollEvents();
}</pre>
<p>update関数にlastKeys, lastMouseButtonsへ最後に押されたキーを保存する処理を追加します。</p>
<h2><span id="toc3">マウスカーソルの座標</span></h2>
<pre>// マウスカーソルのX座標を取得
public double getMouseX() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, buffer, null);
    return buffer.get(0);
}

// マウスカーソルのY座標を取得
public double getMouseY() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, null, buffer);
    return buffer.get(0);
}</pre>
<p>※DoubleBufferはダブルバッファリングではありません。<br />
Double型のバッファにglfwGetCursorPos関数がマウスカーソルの位置を書き込むみたいですね。</p>
<h2><span id="toc4">動作確認</span></h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {

        // イベントの更新
        window.update();

        if (window.isKeyPressed(GLFW.GLFW_KEY_A)) {
            System.out.println("Pressed A");
        }
        if (window.isKeyReleased(GLFW.GLFW_KEY_A)) {
            System.out.println("Released A");
        }
        if (window.isMousePressed(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Pressed Left");
            System.out.println("CursorPos: (" + window.getMouseX() + ", " + window.getMouseY() + ")");
        }
        if (window.isMouseReleased(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Released Left");
        }

        // バッファの更新
        window.swapBuffers();

    }
}</pre>
<p><img decoding="async" width="233" height="270" class="alignnone wp-image-167 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-18.png" /></p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/20220728160/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】ウィンドウの作成 #1</title>
		<link>https://blog.pitan76.net/20220728158/</link>
					<comments>https://blog.pitan76.net/20220728158/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 10:33:02 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=158</guid>

					<description><![CDATA[適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。 Windowクラス package ml.pkom.lwjgl.tutorial; import org.lwjgl. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。</p>
<ul>
<li>Windowクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWVidMode;
import static org.lwjgl.system.MemoryUtil.*;

public class Window {

    public long window;

    // ウィンドウの横幅
    public int width = 640;

    // ウィンドウの縦幅
    public int height = 360;

    // ウィンドウのタイトル名
    public String title = "HogeHoge";

    public void init() {
        // GLFWの初期化
        GLFW.glfwInit();

        // ウィンドウを作成
        window = GLFW.glfwCreateWindow(width, height, title, NULL, NULL);

        // ウィンドウが見えるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);

        // リサイズをできるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

        // ビデオモードの取得
        GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

        // 画面のサイズを取得
        int screenWidth = videoMode.width();
        int screenHeight = videoMode.height();

        // ウィンドウの位置を中央へセットする
        GLFW.glfwSetWindowPos(window, (screenWidth - width) / 2, (screenHeight - height) / 2);

        // ウィンドウを表示
        GLFW.glfwShowWindow(window);
    }

    // 閉じるボタンが押されるとtrueを返す
    public boolean isClosed() {
        return GLFW.glfwWindowShouldClose(window);
    }

    public void update() {
        // マウスなど入力されたイベントを記録する
        GLFW.glfwPollEvents();
    }

    public void swapBuffers() {
        // カラーバッファ(色表示)を入れ替える
        GLFW.glfwSwapBuffers(window);
    }
}</pre>
<ul>
<li>Mainクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

public class Main {
    public static void main(String[] args) {
        Window window = new Window();

        // ウィンドウの初期化
        window.init();

        // 閉じるまでループ
        while (!window.isClosed()) {
            // イベントの更新
            window.update();
            
            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img decoding="async" width="642" height="392" class="alignnone wp-image-163 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-17.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-17.png 642w, https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-17-300x183.png 300w" sizes="(max-width: 642px) 100vw, 642px" /></p>
<p>実行してみるとウィンドウが表示されました。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/20220728158/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】セットアップ #0</title>
		<link>https://blog.pitan76.net/20220728153/</link>
					<comments>https://blog.pitan76.net/20220728153/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 09:57:58 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=153</guid>

					<description><![CDATA[JavaのLWJGLを学ぶついでに記事も書こうと思います。 日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。 私のコードは好きに使ってもらって構いません。 目次 開発環境環境pom. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>JavaのLWJGLを学ぶついでに記事も書こうと思います。<br />
日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。<br />
私のコードは好きに使ってもらって構いません。</p>
<p><iframe title="3D Game using LWJGL 3 Tutorial - #1 Making a Window" width="1107" height="623" src="https://www.youtube.com/embed/ISWcMXxl26s?list=PLaWuTOi9sDepAlbNEOXhjjFSo2WBkWOT2" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>

  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-17" checked><label class="toc-title" for="toc-checkbox-17">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">開発環境</a><ol><li><a href="#toc2" tabindex="0">環境</a></li><li><a href="#toc3" tabindex="0">pom.xml</a></li></ol></li></ol>
    </div>
  </div>

<h2><span id="toc1">開発環境</span></h2>
<h3 style="text-align: left;"><span id="toc2">環境</span></h3>
<p>OS: Windows 11<br />
IDE: Intellij IDEA<br />
Java: OpenJDK 17<br />
LWJGL: 3.3.1</p>
<h3><span id="toc3">pom.xml</span></h3>
<p>以下のページでpom.xmlを生成します。</p>
<a rel="noopener" href="https://www.lwjgl.org/customize" title="LWJGL - Lightweight Java Game Library" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.lwjgl.org%2Fcustomize?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">LWJGL - Lightweight Java Game Library</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.lwjgl.org/customize" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.lwjgl.org</div></div></div></div></a>
<p>Releseの方を選択してみます。</p>
<p>pom.xmlを生成したいのでMavenを選びます。</p>
<p><img decoding="async" width="151" height="158" class="alignnone wp-image-154 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-14.png" /></p>
<p>JOMLも追加しておきます。</p>
<p><img decoding="async" width="253" height="189" class="alignnone wp-image-155 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-15.png" /></p>
<p>下の「DOWNLOAD POM.XML」か「COPY TO CLIPBOARD」でpom.xmlを自身のpom.xmlに貼り付けるか一部だけ貼り付けてください。</p>
<p><img decoding="async" width="698" height="69" class="alignnone wp-image-156 size-full" src="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-16.png" srcset="https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-16.png 698w, https://blog.pitan76.net/wp-content/uploads/2022/07/Pasted-16-300x30.png 300w" sizes="(max-width: 698px) 100vw, 698px" /></p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/20220728153/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>JitPackでJava 8以外を使う方法</title>
		<link>https://blog.pitan76.net/2022072064/</link>
					<comments>https://blog.pitan76.net/2022072064/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Tue, 19 Jul 2022 15:30:51 +0000</pubDate>
				<category><![CDATA[GitHub]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[JitPack]]></category>
		<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=64</guid>

					<description><![CDATA[FabricMCのMOD開発でライブラリをJitPackにあげたかったのだが、ビルドでエラーが発生してしまった。そこでjitpack.ymlでjdkを指定したところ、一時期動いたのだが、また動作しなくなったため、以下のよ [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>FabricMCのMOD開発でライブラリをJitPackにあげたかったのだが、ビルドでエラーが発生してしまった。そこでjitpack.ymlで<a class="keyword" href="http://d.hatena.ne.jp/keyword/jdk">jdk</a>を指定したところ、一時期動いたのだが、また動作しなくなったため、以下のようにbefore_install:をymlに追加すると解決する。<br />
jitpack.ymlは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ直下に配置する。</p>
<p><strong>jitpack.yml</strong></p>
<pre>before_install:
  - <a class="keyword" href="http://d.hatena.ne.jp/keyword/wget">wget</a> <a href="https://github.com/sormuras/bach/raw/master/install-jdk.sh">https://github.com/sormuras/bach/raw/master/install-jdk.sh</a>
  - source ./install-<a class="keyword" href="http://d.hatena.ne.jp/keyword/jdk">jdk</a>.sh --feature 17 --license <a class="keyword" href="http://d.hatena.ne.jp/keyword/GPL">GPL</a>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/jdk">jdk</a>:
  - openjdk17</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/2022072064/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【FabricMC】Illegal character ((CTRL-CHAR, code 31)):&#8230;の対処法</title>
		<link>https://blog.pitan76.net/2022072062/</link>
					<comments>https://blog.pitan76.net/2022072062/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Tue, 19 Jul 2022 15:29:27 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[FabricMC]]></category>
		<category><![CDATA[MOD]]></category>
		<category><![CDATA[MOD開発]]></category>
		<guid isPermaLink="false">https://blog.pitan76.net/?p=62</guid>

					<description><![CDATA[FabricでMOD開発していると以下のようなエラーが出てしまいました。 Illegal character ((CTRL-CHAR, code 31)): only regular white space (\r, \ [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>FabricでMOD開発していると以下のようなエラーが出てしまいました。</p>
<pre>Illegal character ((CTRL-CHAR, code 31)): only regular white space (\r, \n, \t) is allowed between tokens 333333333333333
    at [Source: UNKNOWN; line: 1, column: 2]</pre>
<h3>解決法</h3>
<p>以下のコマンドを実行することにより解決しました。</p>
<p>gradlew &#8211;refresh-dependencies</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pitan76.net/2022072062/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
