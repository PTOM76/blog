<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>情報技術  |  ぴたぶろぐ</title>
	<atom:link href="https://blog.pkom.ml/category/%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.pkom.ml</link>
	<description>自分が書きたいことを書くだけのブログ</description>
	<lastBuildDate>Sun, 07 Aug 2022 10:25:20 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.1</generator>

<image>
	<url>https://blog.pkom.ml/wp-content/uploads/2022/07/cropped-109135739-1-32x32.png</url>
	<title>情報技術  |  ぴたぶろぐ</title>
	<link>https://blog.pkom.ml</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>【Cloudflare】WikiChree.COMの設置にMuuMuuDomainとCoreServerでCloudflareを使った話</title>
		<link>https://blog.pkom.ml/20220807196/</link>
					<comments>https://blog.pkom.ml/20220807196/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Sun, 07 Aug 2022 10:25:20 +0000</pubDate>
				<category><![CDATA[サーバー]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[Cloudflare]]></category>
		<category><![CDATA[CoreServer]]></category>
		<category><![CDATA[MuuMuuDomain]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=196</guid>

					<description><![CDATA[目次 はじめに前提条件Cloudflareアカウント登録サイト追加ネームサーバーの設定ネームサーバー設定ガイドおまけDDoS対策HTTPS化キャッシングおわりに はじめに WikiChree.COM、個人サイト、当ブログ [&#8230;]]]></description>
										<content:encoded><![CDATA[
  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-2" checked><label class="toc-title" for="toc-checkbox-2">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">はじめに</a></li><li><a href="#toc2" tabindex="0">前提条件</a></li><li><a href="#toc3" tabindex="0">Cloudflare</a><ol><li><a href="#toc4" tabindex="0">アカウント登録</a></li><li><a href="#toc5" tabindex="0">サイト追加</a></li><li><a href="#toc6" tabindex="0">ネームサーバーの設定</a><ol><li><a href="#toc7" tabindex="0">ネームサーバー設定ガイド</a></li></ol></li></ol></li><li><a href="#toc8" tabindex="0">おまけ</a><ol><li><a href="#toc9" tabindex="0">DDoS対策</a></li><li><a href="#toc10" tabindex="0">HTTPS化</a></li><li><a href="#toc11" tabindex="0">キャッシング</a></li></ol></li><li><a href="#toc12" tabindex="0">おわりに</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">はじめに</span></h2>
<p>WikiChree.COM、個人サイト、当ブログなど私の所有しているサイトではHTTPS化、サイバー攻撃(DDoS等)対策、キャッシング等をするためにCloudflareを使ってます。<br />
Cloudflareは有料な部分もありますが、基本的には無料で使うことはできます。<br />
今回はそのCloudflareのセットアップ方法を説明します。<br />
WikiChree.COMではMuuMuuDomainとCoreServerを使っているのでMuuMuuDomainでDNSの設定、CloudflareでのDNSはCoreServerのIPを参照させますが、他のサービスでも参考になるとは思います。</p>
<h2><span id="toc2">前提条件</span></h2>
<ul>
<li>独自ドメインを取得していて、ドメインからCoreServerのサーバーへアクセスできる状態であること。</li>
</ul>
<h2><span id="toc3">Cloudflare</span></h2>
<h3><span id="toc4">アカウント登録</span></h3>
<a rel="noopener" href="https://dash.cloudflare.com/sign-up" title="Please Wait... | Cloudflare" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fdash.cloudflare.com%2Fsign-up?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Please Wait... | Cloudflare</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://dash.cloudflare.com/sign-up" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">dash.cloudflare.com</div></div></div></div></a>
<p>上記のURLでCloudflareのアカウントを作成しましょう。<br />
右上から日本語を選択できます。</p>
<p><img loading="lazy" width="935" height="554" class="alignnone wp-image-197 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted.png 935w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-300x178.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-768x455.png 768w" sizes="(max-width: 935px) 100vw, 935px" /></p>
<h3><span id="toc5">サイト追加</span></h3>
<p>作成ボタンをクリックしたら、左のサイドバーから「Web サイト」、真ん中の「サイトを追加」で進みましょう。</p>
<p><img loading="lazy" width="950" height="753" class="alignnone wp-image-198 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-1.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-1.png 950w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-1-300x238.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-1-768x609.png 768w" sizes="(max-width: 950px) 100vw, 950px" /></p>
<p>自分のルートドメインを入力して進みましょう。</p>
<p><img loading="lazy" width="639" height="329" class="alignnone wp-image-199 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-2.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-2.png 639w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-2-300x154.png 300w" sizes="(max-width: 639px) 100vw, 639px" /></p>
<p>無料である一番下のFreeプランにしました。</p>
<p><img loading="lazy" width="894" height="876" class="alignnone wp-image-200 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-3.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-3.png 894w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-3-300x294.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-3-768x753.png 768w" sizes="(max-width: 894px) 100vw, 894px" /></p>
<p>以前のDNSを自動で取得してくれるため、DNS管理の画面が出てきます、そのまま進めてください。</p>
<h3><span id="toc6">ネームサーバーの設定</span></h3>
<p>以下の通りにドメイン レジストラ(MuuMuuDomain、Value Domain等)でCloudflareのネームサーバーを追加しましょう。</p>
<p><img loading="lazy" width="815" height="864" class="alignnone wp-image-201 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-4.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-4.png 815w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-4-283x300.png 283w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-4-768x814.png 768w" sizes="(max-width: 815px) 100vw, 815px" /></p>
<p>MuuMuuDomainではネームサーバー設定変更のボタンをクリックしてネームサーバーの画面が開けます。<br />
サービスによってはネームサーバーの設定画面、もしくはDNS設定画面でネームサーバーを指定することができます。</p>
<p><img loading="lazy" width="489" height="667" class="alignnone wp-image-202 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-5.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-5.png 489w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-5-220x300.png 220w" sizes="(max-width: 489px) 100vw, 489px" /></p>
<p><img loading="lazy" width="401" height="432" class="alignnone wp-image-203 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-6.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-6.png 401w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-6-278x300.png 278w" sizes="(max-width: 401px) 100vw, 401px" /></p>
<p>上記のように<span class="bold red">必ずCloudflareからコピーした</span>ネームサーバーのドメインを貼り付けてください。<br />
既に私は登録しているので、画像でムームードメインでの登録例を見せています。<br />
Cloudflareの方を進めましょう。<br />
レジストラ(ドメインサービス)によっては反映までに時間がかかるものもあるようですが、私はすぐに反映されました。<br />
あ、CoreServer側の設定は不要でしたね^^;</p>
<h4><span id="toc7">ネームサーバー設定ガイド</span></h4>
<ul>
<li>お名前.com: <a href="https://www.onamae.com/guide/p/67">https://www.onamae.com/guide/p/67</a></li>
<li>ムームードメイン: <a href="https://support.muumuu-domain.com/hc/ja/articles/360047097273-%E3%83%8D%E3%83%BC%E3%83%A0%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E6%96%B9%E6%B3%95-GMO%E3%83%9A%E3%83%91%E3%83%9C%E4%BB%A5%E5%A4%96%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-">https://support.muumuu-domain.com/hc/ja/articles/360047097273-%E3%83%8D%E3%83%BC%E3%83%A0%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E6%96%B9%E6%B3%95-GMO%E3%83%9A%E3%83%91%E3%83%9C%E4%BB%A5%E5%A4%96%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-</a></li>
<li>バリュードメイン: <a href="https://www.value-domain.com/userguide/manual/modns">https://www.value-domain.com/userguide/manual/modns</a></li>
<li>Google Domains: <a href="https://support.google.com/domains/answer/3290309?hl=ja">https://support.google.com/domains/answer/3290309?hl=ja</a></li>
</ul>
<h2><span id="toc8">おまけ</span></h2>
<h3><span id="toc9">DDoS対策</span></h3>
<p>DDoS攻撃を受けている際はサイドバーの「概要」から「Under Attack モード」を有効にしてみてください。</p>
<p><img loading="lazy" width="338" height="61" class="alignnone wp-image-204 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-7.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-7.png 338w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-7-300x54.png 300w" sizes="(max-width: 338px) 100vw, 338px" /></p>
<p>一度オンにしてオフにしてみると以下のような画面が出てきます。</p>
<p><img loading="lazy" width="898" height="504" class="alignnone wp-image-205 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8.png 898w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-300x168.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-768x431.png 768w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-120x68.png 120w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-160x90.png 160w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-8-320x180.png 320w" sizes="(max-width: 898px) 100vw, 898px" /></p>
<p>セキュリティ レベルは攻撃されていないのであれば普通は標準かオフでもいいでしょう。<br />
1日1回、毎回DDoS攻撃されているのであれば、Unser Attack モード、もしくは高にしましょう。</p>
<h3><span id="toc10">HTTPS化</span></h3>
<p>サイドバーの「SSL/TLS」からSSLの設定を開きましょう。</p>
<p><img loading="lazy" width="1040" height="497" class="alignnone wp-image-206 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9.png 1040w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9-300x143.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9-1024x489.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-9-768x367.png 768w" sizes="(max-width: 1040px) 100vw, 1040px" /></p>
<p>サーバー上でSSL化しているのであれば「フル」、最初からSSL化していないのであれば「フレキシブル」でいいでしょう。<br />
これだけでHTTPS化は完了なのですが、ついでに以下の設定も行いましょう。</p>
<p>サイドバーの「SSL/TLS」＞「エッジ証明書」を開きましょう。</p>
<p><img loading="lazy" width="1040" height="239" class="alignnone wp-image-207 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10.png 1040w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10-300x69.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10-1024x235.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-10-768x176.png 768w" sizes="(max-width: 1040px) 100vw, 1040px" /></p>
<p><img loading="lazy" width="1046" height="271" class="alignnone wp-image-208 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11.png 1046w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11-300x78.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11-1024x265.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-11-768x199.png 768w" sizes="(max-width: 1046px) 100vw, 1046px" /></p>
<p>私は上記のように設定しています。<br />
日和見暗号化とは、暗号化済み、SSL化済みしているが、見た目上はhttpのままにできるという機能です。SEO対策には影響ありませんのでオンにしてても問題はありませんが、httpsの方が私は好きなのでオフにしてますね。</p>
<h3><span id="toc11">キャッシング</span></h3>
<p>勝手にキャッシングされるようになってますが、3時間ぐらいにした方が良さそうです。JavaScript、CSSを更新しても、このキャッシュで更新されずに困ることがあるんですよね。<br />
<img loading="lazy" width="1095" height="861" class="alignnone wp-image-209 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12.png 1095w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12-300x236.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12-1024x805.png 1024w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-12-768x604.png 768w" sizes="(max-width: 1095px) 100vw, 1095px" /></p>
<p>3時間にしておきます。<br />
また、更新したCSS、JavaScript、画像など確認したい際は開発モードを有効にするといいでしょう。</p>
<p><img loading="lazy" width="335" height="68" class="alignnone wp-image-210 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-13.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-13.png 335w, https://blog.pkom.ml/wp-content/uploads/2022/08/Pasted-13-300x61.png 300w" sizes="(max-width: 335px) 100vw, 335px" /></p>
<h2><span id="toc12">おわりに</span></h2>
<p>イメージ的には「独自ドメイン」→「Cloudflare」→「CoreServer」といった感じでしょうかね。</p>
<p>Cloudflareはアクセス解析、ドメイン購入といろいろできるので素晴らしいサービスだと思います。<br />
無料でここまでできるのも凄いですよね。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220807196/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>GitHub Pagesを利用してMavenリポジトリをつくる</title>
		<link>https://blog.pkom.ml/20220729178/</link>
					<comments>https://blog.pkom.ml/20220729178/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Fri, 29 Jul 2022 03:18:02 +0000</pubDate>
				<category><![CDATA[Git]]></category>
		<category><![CDATA[GitHub]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[GitHub Pages]]></category>
		<category><![CDATA[Maven]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=178</guid>

					<description><![CDATA[目次 はじめに設置したMavenリポジトリPHPスクリプト前提条件やり方maven.phpの仕様さいごに関連リンク はじめに FabricMCのMOD開発でライブラリをつくったのでMavenリポジトリをGitHubのリポ [&#8230;]]]></description>
										<content:encoded><![CDATA[
  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-4" checked><label class="toc-title" for="toc-checkbox-4">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">はじめに</a><ol><li><a href="#toc2" tabindex="0">設置したMavenリポジトリ</a></li><li><a href="#toc3" tabindex="0">PHPスクリプト</a></li><li><a href="#toc4" tabindex="0">前提条件</a></li><li><a href="#toc5" tabindex="0">やり方</a></li><li><a href="#toc6" tabindex="0">maven.phpの仕様</a></li></ol></li><li><a href="#toc7" tabindex="0">さいごに</a><ol><li><a href="#toc8" tabindex="0">関連リンク</a></li></ol></li></ol>
    </div>
  </div>

<h2><span id="toc1">はじめに</span></h2>
<p>FabricMCのMOD開発でライブラリをつくったのでMavenリポジトリをGitHubのリポジトリへ設置し、GitHub Pagesで公開してみました。</p>
<h3><span id="toc2">設置したMavenリポジトリ</span></h3>
<a rel="noopener" href="https://maven.pkom.ml/" title="Index of /" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fmaven.pkom.ml%2F?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Index of /</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://maven.pkom.ml/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">maven.pkom.ml</div></div></div></div></a>
<h3 id="content_1_2"><span id="toc3">PHPスクリプト</span></h3>
<p>PHPでMavenリポジトリをアップロードし、自動的にディレクトリリストのHTMLを生成し、GitHubへプッシュするスクリプトを書いてみました。</p>
<a rel="noopener" href="https://github.com/Pitan76/maven/raw/main/maven.php" title="Index of {$displaydir}" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fgithub.com%2FPitan76%2Fmaven%2Fraw%2Fmain%2Fmaven.php?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Index of {$displaydir}</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://github.com/Pitan76/maven/raw/main/maven.php" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">github.com</div></div></div></div></a>
<h3 id="content_1_3"><span id="toc4">前提条件</span></h3>
<ul class="list1 list-indent1">
<li>PHPを動作させるWebサーバーをインストールしておく(XAMPP、LAMP等)</li>
<li>Gitを入れておく</li>
<li>GitHubのアカウントをつくっておく</li>
<li>Mavenリポジトリとして使うGitリポジトリをGitHubにつくっておく</li>
</ul>
<h3><span id="toc5">やり方</span></h3>
<p>Pitan Mod Wikiの文章をそのまま載せておきます。</p>
<a rel="noopener" href="https://wikichree.com/pitan76/?Diary/2022-07-14" title="Diary/2022-07-14 - Pitan&#x20;Mod&#x20;Wiki" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwikichree.com%2Fpitan76%2F%3FDiary%2F2022-07-14?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Diary/2022-07-14 - Pitan&#x20;Mod&#x20;Wiki</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://wikichree.com/pitan76/?Diary/2022-07-14" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">wikichree.com</div></div></div></div></a>
<p>1. GitHubのGitリポジトリを開き、[Settings]→[Pages]→SourceがNoneになっているのでbranchを選択する<br />
2. 特定のhtdocsにmavenリポジトリとするフォルダをつくる。(htdocs/maven/にしました。)<br />
3. つくったフォルダにmaven.phpを放り込む。(今回はhtdocs/maven/maven.phpに放り込みました。)<br />
4. つくったフォルダでターミナルを開き、<strong>git init</strong>を実行<br />
5. <strong>git add *</strong>を実行<br />
6. <strong>git commit -m &#8220;(任意)&#8221;</strong>を実行<br />
7. <strong>git branch -M main</strong>を実行<br />
8. <strong>git remote add origin https://github.com/(ユーザー名)/(リポジトリ名).git</strong>を実行<br />
9. <strong>git push -u origin main</strong>を実行<br />
10. ブラウザでmaven.phpを開き、jarをアップロードする。(私の場合はlocalhost/maven/maven.phpとなっています)</p>
<h3 id="content_1_5"><span id="toc6">maven.phpの仕様</span></h3>
<ul class="list1 list-indent1">
<li>アップロード後、自動でgit push</li>
<li>ハッシュファイルを作成する</li>
<li>ディレクトリリストのindex.htmlを自動生成する</li>
</ul>
<p>ここからは任意ですが、Customドメインもついでに設定しておきます<br />
Custom domainで自分のドメインを設定しました。</p>
<h2><span id="toc7">さいごに</span></h2>
<p>MavenリポジトリをGitHub Pagesに設置し、ライブラリを公開できて面白かったです。<br />
正しい方法ではないと思うので外部の関連サイトも載せておきます。</p>
<h3><span id="toc8">関連リンク</span></h3>
<a rel="noopener" href="https://weblabo.oscasierra.net/maven-deploy-github/" title="GitHubにMavenリポジトリを構築してライブラリを公開する方法 |" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/35d08b22d0390132263fef83e824cac8.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">GitHubにMavenリポジトリを構築してライブラリを公開する方法 |</div><div class="blogcard-snippet external-blogcard-snippet">本稿では、Maven リポジトリを GitHub 上に作成して jar ライブラリを配布する方法について解説します。</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://weblabo.oscasierra.net/maven-deploy-github/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">weblabo.oscasierra.net</div></div></div></div></a>
<a rel="noopener" href="https://com4dc.hatenablog.com/entry/2020/03/30/224953" title="GithubのRepositoryをmavenリポジトリとして使う - com4dc’s blog" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/7f1b87261cff8d08d94b7a2dcc02f4f3.jpg" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">GithubのRepositoryをmavenリポジトリとして使う - com4dc’s blog</div><div class="blogcard-snippet external-blogcard-snippet">なんで今さら 数年前に開発が停止してしまっているコードをフォークして利用したい 元のソースのApache License 2.0。フォークしたコードはOSSとして公開しないといけない？（うろ覚え・・・） ソースコードをそのまま組み込むのはNGそうな気がする？ 修正と再頒布そのものは禁止されていない（はず maven の...</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://com4dc.hatenablog.com/entry/2020/03/30/224953" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">com4dc.hatenablog.com</div></div></div></div></a>
<a rel="noopener" href="https://qiita.com/koduki/items/6babcc6f2b233da96e06" title="2020年のMavenリポジトリの作り方 - Qiita" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-9f5428127621718a910c8b63951390ad.png?ixlib=rb-4.0.0&#038;w=1200&#038;mark64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTkxNiZ0eHQ9MjAyMCVFNSVCOSVCNCVFMyU4MSVBRU1hdmVuJUUzJTgzJUFBJUUzJTgzJTlEJUUzJTgyJUI4JUUzJTgzJTg4JUUzJTgzJUFBJUUzJTgxJUFFJUU0JUJEJTlDJUUzJTgyJThBJUU2JTk2JUI5JnR4dC1jb2xvcj0lMjMyMTIxMjEmdHh0LWZvbnQ9SGlyYWdpbm8lMjBTYW5zJTIwVzYmdHh0LXNpemU9NTYmdHh0LWNsaXA9ZWxsaXBzaXMmdHh0LWFsaWduPWxlZnQlMkN0b3Amcz1jOWJkN2RhOTRhYmY5ZjI5MTQ3OTE4ZmI2ODFjYThkOA&#038;mark-x=142&#038;mark-y=112&#038;blend64=aHR0cHM6Ly9xaWl0YS11c2VyLWNvbnRlbnRzLmltZ2l4Lm5ldC9-dGV4dD9peGxpYj1yYi00LjAuMCZ3PTYxNiZ0eHQ9JTQwa29kdWtpJnR4dC1jb2xvcj0lMjMyMTIxMjEmdHh0LWZvbnQ9SGlyYWdpbm8lMjBTYW5zJTIwVzYmdHh0LXNpemU9MzYmdHh0LWFsaWduPWxlZnQlMkN0b3Amcz01N2QxMjJjOGVkNzgwMmM0ZGM0NzhmNzUzYTVjN2M2Yw&#038;blend-x=142&#038;blend-y=491&#038;blend-mode=normal&#038;s=5065ef28c6bc083f309e217ff68622f0" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">2020年のMavenリポジトリの作り方 - Qiita</div><div class="blogcard-snippet external-blogcard-snippet">

はじめに

Javaのエンジニアであれば何だかんだでMavenリポジトリを使うことは非常に多いと思います。Gradleであっても使いますしね。

OSSなどはセントラルリポジトリから落とすとして自作のライブラリの管理をどうしていま...</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://qiita.com/koduki/items/6babcc6f2b233da96e06" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">qiita.com</div></div></div></div></a>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220729178/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】描画処理 &#8211; その1(背景色) #4</title>
		<link>https://blog.pkom.ml/20220728173/</link>
					<comments>https://blog.pkom.ml/20220728173/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:53:06 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=173</guid>

					<description><![CDATA[目次 Color4fクラスWindowクラス Color4fクラス 色を保存するためのクラスをつくっておきます。 なくてもいいんですが、私はつくる派です。 package ml.pkom.lwjgl.tutorial;  [&#8230;]]]></description>
										<content:encoded><![CDATA[
  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-6" checked><label class="toc-title" for="toc-checkbox-6">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">Color4fクラス</a></li><li><a href="#toc2" tabindex="0">Windowクラス</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">Color4fクラス</span></h2>
<p>色を保存するためのクラスをつくっておきます。<br />
なくてもいいんですが、私はつくる派です。</p>
<pre>package ml.pkom.lwjgl.tutorial;

public class Color4f {
    public float r;
    public float g;
    public float b;
    public float a;
    
    public Color4f(float r, float g, float b) {
        this(r, g, b, 1.0f);
    }
    
    public Color4f(float r, float g, float b, float a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
}</pre>
<h2><span id="toc2">Windowクラス</span></h2>
<p>先ほどつくったColor4fクラスを使います。<br />
つくってない場合は一つ一つr, g, bのfloat型変数を用意する必要がありますね。</p>
<pre>// 背景色
public Color4f bgColor new Color4f(0f, 0f, 0f);</pre>
<pre>public void init() {
    (省略)

    // リサイズをできるように設定
    GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

    GLFW.glfwMakeContextCurrent(window);
    GL.createCapabilities();

    // ビデオモードの取得
    GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

    (省略)
}</pre>
<pre>// 背景色をセット
public void setBgColor(float r, float g, float b) {
    this.bgColor = new Color4f(r, g, b);
}</pre>
<p>update関数に以下の処理を追加します。</p>
<pre>// 背景色を描画
GL11.glClearColor(bgColor.r, bgColor.g, bgColor.b, bgColor.a);
GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);</pre>
<p><img loading="lazy" width="413" height="241" class="alignnone wp-image-174 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21.png 413w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-21-300x175.png 300w" sizes="(max-width: 413px) 100vw, 413px" /></p>
<p>どこかに以下のコードを埋め込むと黄色になると思います。</p>
<pre>window.setBgColor(1.0f, 1.0f, 0.0f);</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728173/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】60FPSでループ処理 #3</title>
		<link>https://blog.pkom.ml/20220728169/</link>
					<comments>https://blog.pkom.ml/20220728169/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:34:10 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=169</guid>

					<description><![CDATA[Windowクラスへ以下の変数を追記しておく。 // 基準のFPS public int fps = 60; // FPS public double fpsCap = fps; public double time,  [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Windowクラスへ以下の変数を追記しておく。</p>
<pre>// 基準のFPS
public int fps = 60;

// FPS
public double fpsCap = fps;

public double time, processedTime;</pre>
<p>以下の関数も追記</p>
<pre>public boolean isUpdating() {
    double nextTime = getTime();
    double passedTime = nextTime - time;
    processedTime += passedTime;
    time = nextTime;

    while (processedTime &gt; 1.0/fpsCap) {
        processedTime -= 1.0/fpsCap;
        return true;
    }
    return false;
}

// 現在のFPSを取得
public double getFPS() {
    return fpsCap;
}

// 時間の取得
public double getTime() {
    return (double) System.nanoTime() / (double) 1000000000;
}</pre>
<p>Windowクラスのinit()関数の最後に以下の処理を追記</p>
<pre>time = getTime();</pre>
<p><img loading="lazy" width="281" height="447" class="alignnone wp-image-170 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19.png 281w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-19-189x300.png 189w" sizes="(max-width: 281px) 100vw, 281px" /></p>
<h2>Mainクラス(動作確認)</h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {
        if (window.isUpdating()) {
            // イベントの更新
            window.update();

            System.out.println(window.getFPS());

            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img loading="lazy" width="257" height="346" class="alignnone wp-image-171 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20.png 257w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-20-223x300.png 223w" sizes="(max-width: 257px) 100vw, 257px" /></p>
<p>現在のFPS(60.0)が表示されたら成功です。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728169/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】キー、マウス入力 #2</title>
		<link>https://blog.pkom.ml/20220728160/</link>
					<comments>https://blog.pkom.ml/20220728160/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 14:10:32 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=160</guid>

					<description><![CDATA[次はキー、マウス入力となります。 目次 キーの入力マウスの入力マウスカーソルの座標動作確認 キーの入力 // キーが押されているか public boolean isKeyDown(int key) { return G [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>次はキー、マウス入力となります。</p>

  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-10" checked><label class="toc-title" for="toc-checkbox-10">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">キーの入力</a></li><li><a href="#toc2" tabindex="0">マウスの入力</a></li><li><a href="#toc3" tabindex="0">マウスカーソルの座標</a></li><li><a href="#toc4" tabindex="0">動作確認</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">キーの入力</span></h2>
<pre>// キーが押されているか
public boolean isKeyDown(int key) {
    return GLFW.glfwGetKey(window, key) == 1;
}

// キーが押されたか
public boolean isKeyPressed(int key) {
    return isKeyDown(key) &amp;&amp; !lastKeys[key];
}

// キーが離されたか
public boolean isKeyReleased(int key) {
    return !isKeyDown(key) &amp;&amp; lastKeys[key];
}</pre>
<p>上記のコードをWindowクラスに追加してください。<br />
GLFW.glfwGetKeyでは引数に指定されたキーが押されているか確認できます。1が返されると押されているということになるみたいですね。</p>
<h2><span id="toc2">マウスの入力</span></h2>
<pre>// マウスが押されているか
public boolean isMouseDown(int button) {
    return GLFW.glfwGetMouseButton(window, button) == 1;
}

// マウスが押されたか
public boolean isMousePressed(int button) {
    return isMouseDown(button) &amp;&amp; !lastMouseButtons[button];
}

// マウスが離されたか
public boolean isMouseReleased(int button) {
    return !isMouseDown(button) &amp;&amp; lastMouseButtons[button];
}</pre>
<p>こちらもWindowクラスに付け足してください。<br />
上の項目の仕様と同じみたいです。</p>
<pre>// 最後に押されたキー
public boolean[] lastKeys = new boolean[GLFW.GLFW_KEY_LAST];

// 最後に押されたマウスボタン
public boolean[] lastMouseButtons = new boolean[GLFW.GLFW_MOUSE_BUTTON_LAST];</pre>
<p>上記の配列は上らへんに追記しておいてください。<br />
これがないと最後に押されたキーを記録できません。</p>
<pre>public void update() {
    for (int i = 0; i &lt; GLFW.GLFW_KEY_LAST; i++)
        lastKeys[i] = isKeyDown(i);
    for (int i = 0; i &lt; GLFW.GLFW_MOUSE_BUTTON_LAST; i++)
        lastMouseButtons[i] = isMouseDown(i);

    // マウスなど入力されたイベントを記録する
    GLFW.glfwPollEvents();
}</pre>
<p>update関数にlastKeys, lastMouseButtonsへ最後に押されたキーを保存する処理を追加します。</p>
<h2><span id="toc3">マウスカーソルの座標</span></h2>
<pre>// マウスカーソルのX座標を取得
public double getMouseX() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, buffer, null);
    return buffer.get(0);
}

// マウスカーソルのY座標を取得
public double getMouseY() {
    DoubleBuffer buffer = BufferUtils.createDoubleBuffer(1);
    GLFW.glfwGetCursorPos(window, null, buffer);
    return buffer.get(0);
}</pre>
<p>※DoubleBufferはダブルバッファリングではありません。<br />
Double型のバッファにglfwGetCursorPos関数がマウスカーソルの位置を書き込むみたいですね。</p>
<h2><span id="toc4">動作確認</span></h2>
<pre>public static void main(String[] args) {
    Window window = new Window();

    // ウィンドウの初期化
    window.init();

    // 閉じるまでループ
    while (!window.isClosed()) {

        // イベントの更新
        window.update();

        if (window.isKeyPressed(GLFW.GLFW_KEY_A)) {
            System.out.println("Pressed A");
        }
        if (window.isKeyReleased(GLFW.GLFW_KEY_A)) {
            System.out.println("Released A");
        }
        if (window.isMousePressed(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Pressed Left");
            System.out.println("CursorPos: (" + window.getMouseX() + ", " + window.getMouseY() + ")");
        }
        if (window.isMouseReleased(GLFW.GLFW_MOUSE_BUTTON_LEFT)) {
            System.out.println("Released Left");
        }

        // バッファの更新
        window.swapBuffers();

    }
}</pre>
<p><img loading="lazy" width="233" height="270" class="alignnone wp-image-167 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-18.png" /></p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728160/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】ウィンドウの作成 #1</title>
		<link>https://blog.pkom.ml/20220728158/</link>
					<comments>https://blog.pkom.ml/20220728158/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 10:33:02 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=158</guid>

					<description><![CDATA[適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。 Windowクラス package ml.pkom.lwjgl.tutorial; import org.lwjgl. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>適当に初期クラスのMainクラスとウィンドウの処理を書くためのWindowクラスをつくっておきます。</p>
<ul>
<li>Windowクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWVidMode;
import static org.lwjgl.system.MemoryUtil.*;

public class Window {

    public long window;

    // ウィンドウの横幅
    public int width = 640;

    // ウィンドウの縦幅
    public int height = 360;

    // ウィンドウのタイトル名
    public String title = "HogeHoge";

    public void init() {
        // GLFWの初期化
        GLFW.glfwInit();

        // ウィンドウを作成
        window = GLFW.glfwCreateWindow(width, height, title, NULL, NULL);

        // ウィンドウが見えるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);

        // リサイズをできるように設定
        GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE);

        // ビデオモードの取得
        GLFWVidMode videoMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

        // 画面のサイズを取得
        int screenWidth = videoMode.width();
        int screenHeight = videoMode.height();

        // ウィンドウの位置を中央へセットする
        GLFW.glfwSetWindowPos(window, (screenWidth - width) / 2, (screenHeight - height) / 2);

        // ウィンドウを表示
        GLFW.glfwShowWindow(window);
    }

    // 閉じるボタンが押されるとtrueを返す
    public boolean isClosed() {
        return GLFW.glfwWindowShouldClose(window);
    }

    public void update() {
        // マウスなど入力されたイベントを記録する
        GLFW.glfwPollEvents();
    }

    public void swapBuffers() {
        // カラーバッファ(色表示)を入れ替える
        GLFW.glfwSwapBuffers(window);
    }
}</pre>
<ul>
<li>Mainクラス</li>
</ul>
<pre>package ml.pkom.lwjgl.tutorial;

public class Main {
    public static void main(String[] args) {
        Window window = new Window();

        // ウィンドウの初期化
        window.init();

        // 閉じるまでループ
        while (!window.isClosed()) {
            // イベントの更新
            window.update();
            
            // バッファの更新
            window.swapBuffers();
        }
    }
}</pre>
<p><img loading="lazy" width="642" height="392" class="alignnone wp-image-163 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17.png 642w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-17-300x183.png 300w" sizes="(max-width: 642px) 100vw, 642px" /></p>
<p>実行してみるとウィンドウが表示されました。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728158/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【LWJGL3】セットアップ #0</title>
		<link>https://blog.pkom.ml/20220728153/</link>
					<comments>https://blog.pkom.ml/20220728153/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 09:57:58 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[プログラミング]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[LWJGL]]></category>
		<category><![CDATA[LWJGL3]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=153</guid>

					<description><![CDATA[JavaのLWJGLを学ぶついでに記事も書こうと思います。 日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。 私のコードは好きに使ってもらって構いません。 目次 開発環境環境pom. [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>JavaのLWJGLを学ぶついでに記事も書こうと思います。<br />
日本語で説明されているものが少なかったので以下の動画を参考に日本語で説明していきます。<br />
私のコードは好きに使ってもらって構いません。</p>
<p><iframe loading="lazy" title="3D Game using LWJGL 3 Tutorial - #1 Making a Window" width="1107" height="623" src="https://www.youtube.com/embed/ISWcMXxl26s?list=PLaWuTOi9sDepAlbNEOXhjjFSo2WBkWOT2" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>

  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-14" checked><label class="toc-title" for="toc-checkbox-14">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">開発環境</a><ol><li><a href="#toc2" tabindex="0">環境</a></li><li><a href="#toc3" tabindex="0">pom.xml</a></li></ol></li></ol>
    </div>
  </div>

<h2><span id="toc1">開発環境</span></h2>
<h3 style="text-align: left;"><span id="toc2">環境</span></h3>
<p>OS: Windows 11<br />
IDE: Intellij IDEA<br />
Java: OpenJDK 17<br />
LWJGL: 3.3.1</p>
<h3><span id="toc3">pom.xml</span></h3>
<p>以下のページでpom.xmlを生成します。</p>
<a rel="noopener" href="https://www.lwjgl.org/customize" title="LWJGL - Lightweight Java Game Library" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.lwjgl.org%2Fcustomize?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">LWJGL - Lightweight Java Game Library</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.lwjgl.org/customize" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.lwjgl.org</div></div></div></div></a>
<p>Releseの方を選択してみます。</p>
<p>pom.xmlを生成したいのでMavenを選びます。</p>
<p><img loading="lazy" width="151" height="158" class="alignnone wp-image-154 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-14.png" /></p>
<p>JOMLも追加しておきます。</p>
<p><img loading="lazy" width="253" height="189" class="alignnone wp-image-155 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-15.png" /></p>
<p>下の「DOWNLOAD POM.XML」か「COPY TO CLIPBOARD」でpom.xmlを自身のpom.xmlに貼り付けるか一部だけ貼り付けてください。</p>
<p><img loading="lazy" width="698" height="69" class="alignnone wp-image-156 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16.png 698w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-16-300x30.png 300w" sizes="(max-width: 698px) 100vw, 698px" /></p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220728153/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【Minecraft】無料でポート開放せずにサーバーを公開するツール</title>
		<link>https://blog.pkom.ml/20220723148/</link>
					<comments>https://blog.pkom.ml/20220723148/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Sat, 23 Jul 2022 07:41:35 +0000</pubDate>
				<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[サーバー]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[中継サーバー]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=148</guid>

					<description><![CDATA[ポート開放せずにサーバーを公開するツールを2つ紹介します。 ポート開放できない方もいると思いますし、手軽にゲームサーバーを公開できるので便利だと思います。 Minecraftで使う方は多いと思います。 仕組みは中継サーバ [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>ポート開放せずにサーバーを公開するツールを2つ紹介します。<br />
ポート開放できない方もいると思いますし、手軽にゲームサーバーを公開できるので便利だと思います。<br />
Minecraftで使う方は多いと思います。<br />
仕組みは中継サーバー(リレーサーバー)を利用しているらしいです。<br />
これを無料で提供してくれるのは有り難いですね。</p>

  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-16" checked><label class="toc-title" for="toc-checkbox-16">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">ゲームサーバー公開(ホスト)ツール | GameServerHostingTool</a></li><li><a href="#toc2" tabindex="0">playit</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">ゲームサーバー公開(ホスト)ツール | GameServerHostingTool</span></h2>
<p>こちらは日本産のゲームサーバー公開ツールです。</p>
<a rel="noopener" href="https://gsht.io/" title="ゲームサーバー公開(ホスト)ツール 配布ページ" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/e3204717414b9ee56d894957101fc2e7.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">ゲームサーバー公開(ホスト)ツール 配布ページ</div><div class="blogcard-snippet external-blogcard-snippet">ポート開放不要でゲームサーバーを外部に公開できるツールの配布ページ、紹介ページです。</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://files.esugo.net/mcsvrhost/site/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">files.esugo.net</div></div></div></div></a>
<h2><span id="toc2">playit</span></h2>
<p>こちらは海外産のゲームサーバーを公開するためのツールです。</p>
<a rel="noopener" href="https://playit.gg/" title="making it easy to play games with friends" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/f705ea3b30b2906fcc6440efc7c05249.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">making it easy to play games with friends</div><div class="blogcard-snippet external-blogcard-snippet">We&#039;ve been making it easy to play games with friends since March 2020. Get a free static IP and ditch port forwarding.</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://playit.gg/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">playit.gg</div></div></div></div></a>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220723148/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>【CurseForge】アップロードしたファイルを削除する方法</title>
		<link>https://blog.pkom.ml/20220721119/</link>
					<comments>https://blog.pkom.ml/20220721119/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Thu, 21 Jul 2022 06:45:21 +0000</pubDate>
				<category><![CDATA[Minecraft]]></category>
		<category><![CDATA[ゲーム]]></category>
		<category><![CDATA[サービス]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[CurseForge]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=119</guid>

					<description><![CDATA[目次 初めに画像付きの手順簡易的に手順をまとめる最後に 初めに 間違って別のMODをアップロードしてしまい、削除したかったのですが、削除ボタンがありませんでした。そこでフォーラムで調べてみたところこれを参考にしてみると削 [&#8230;]]]></description>
										<content:encoded><![CDATA[
  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-18" checked><label class="toc-title" for="toc-checkbox-18">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">初めに</a></li><li><a href="#toc2" tabindex="0">画像付きの手順</a></li><li><a href="#toc3" tabindex="0">簡易的に手順をまとめる</a></li><li><a href="#toc4" tabindex="0">最後に</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">初めに</span></h2>
<p><img loading="lazy" width="913" height="318" class="alignnone wp-image-121 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-1.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-1.png 913w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-1-300x104.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-1-768x267.png 768w" sizes="(max-width: 913px) 100vw, 913px" /></p>
<p>間違って別のMODをアップロードしてしまい、削除したかったのですが、削除ボタンがありませんでした。そこでフォーラムで調べてみたところこれを参考にしてみると削除できました。</p>
<a rel="noopener" href="https://minecraft.curseforge.com/forums/modding-java-edition/java-mods/ideas/5014-deleting-files-of-a-project" title="Attention Required! | Cloudflare" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fminecraft.curseforge.com%2Fforums%2Fmodding-java-edition%2Fjava-mods%2Fideas%2F5014-deleting-files-of-a-project?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">Attention Required! | Cloudflare</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://minecraft.curseforge.com/forums/modding-java-edition/java-mods/ideas/5014-deleting-files-of-a-project" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">minecraft.curseforge.com</div></div></div></div></a>
<h2><span id="toc2">画像付きの手順</span></h2>
<p>削除したいファイルにチェックします。</p>
<p><img loading="lazy" width="258" height="340" class="alignnone wp-image-122 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-2.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-2.png 258w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-2-228x300.png 228w" sizes="(max-width: 258px) 100vw, 258px" /></p>
<p>Archiveボタンをクリック。</p>
<p><img loading="lazy" width="608" height="337" class="alignnone wp-image-123 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3.png 608w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3-300x166.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3-120x68.png 120w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-3-160x90.png 160w" sizes="(max-width: 608px) 100vw, 608px" /></p>
<p>ダイアログのような画面が出てくると思うのでArchive Filesをクリック。<img loading="lazy" width="249" height="228" class="alignnone wp-image-124 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-4.png" /></p>
<p>StatusをArchivedの項目に変える。<br />
そしてファイルの詳細画面を開くとDeleteボタンが表示されているのでクリックすると削除できます。</p>
<p><img loading="lazy" width="914" height="607" class="alignnone wp-image-125 size-full" src="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-5.png" srcset="https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-5.png 914w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-5-300x199.png 300w, https://blog.pkom.ml/wp-content/uploads/2022/07/Pasted-5-768x510.png 768w" sizes="(max-width: 914px) 100vw, 914px" /></p>
<h2><span id="toc3">簡易的に手順をまとめる</span></h2>
<ol>
<li>削除したいファイルのチェックボックスにチェックを入れる。</li>
<li>「Archive」ボタンをクリックする。</li>
<li>「Archive Files」ボタンをクリックする。</li>
<li>Statusを「Archived」に変更する。</li>
<li>ファイルのリンクを開く。</li>
<li>「Delete」ボタンをクリックする。</li>
</ol>
<h2><span id="toc4">最後に</span></h2>
<p>少し面倒かな～と思いますが、誤ってファイルを削除してしまうことはないかと思います。<br />
この頃はCurseForge以外にModrinthというModを配布するためのサイトが出てきたみたいですね</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220721119/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>無料のWikiソフトウェアを比較してみる</title>
		<link>https://blog.pkom.ml/20220720111/</link>
					<comments>https://blog.pkom.ml/20220720111/#respond</comments>
		
		<dc:creator><![CDATA[Pitan]]></dc:creator>
		<pubDate>Wed, 20 Jul 2022 12:07:44 +0000</pubDate>
				<category><![CDATA[DokuWiki]]></category>
		<category><![CDATA[GROWI]]></category>
		<category><![CDATA[MediaWiki]]></category>
		<category><![CDATA[PukiWiki]]></category>
		<category><![CDATA[ソフトウェア]]></category>
		<category><![CDATA[情報技術]]></category>
		<category><![CDATA[通信技術]]></category>
		<category><![CDATA[CMS]]></category>
		<category><![CDATA[Web]]></category>
		<category><![CDATA[Wiki]]></category>
		<category><![CDATA[Wikiソフトウェア]]></category>
		<guid isPermaLink="false">https://blog.pkom.ml/?p=111</guid>

					<description><![CDATA[目次 はじめにWikiソフトウェアPukiWikiメリットデメリットDokuWikiメリットデメリットMediaWikiメリットデメリットGROWIメリットおわりに はじめに ここでのWikiソフトウェアは、誰でも編集で [&#8230;]]]></description>
										<content:encoded><![CDATA[
  <div id="toc" class="toc tnt-number toc-center tnt-number border-element"><input type="checkbox" class="toc-checkbox" id="toc-checkbox-20" checked><label class="toc-title" for="toc-checkbox-20">目次</label>
    <div class="toc-content">
    <ol class="toc-list open"><li><a href="#toc1" tabindex="0">はじめに</a><ol><li><a href="#toc2" tabindex="0">Wikiソフトウェア</a><ol><li><a href="#toc3" tabindex="0">PukiWiki</a><ol><li><a href="#toc4" tabindex="0">メリット</a></li><li><a href="#toc5" tabindex="0">デメリット</a></li></ol></li><li><a href="#toc6" tabindex="0">DokuWiki</a><ol><li><a href="#toc7" tabindex="0">メリット</a></li><li><a href="#toc8" tabindex="0">デメリット</a></li></ol></li><li><a href="#toc9" tabindex="0">MediaWiki</a><ol><li><a href="#toc10" tabindex="0">メリット</a></li><li><a href="#toc11" tabindex="0">デメリット</a></li></ol></li><li><a href="#toc12" tabindex="0">GROWI</a><ol><li><a href="#toc13" tabindex="0">メリット</a></li></ol></li></ol></li></ol></li><li><a href="#toc14" tabindex="0">おわりに</a></li></ol>
    </div>
  </div>

<h2><span id="toc1">はじめに</span></h2>
<p>ここでのWikiソフトウェアは、誰でも編集できるWebサイトということを指します。<br />
あくまで私の意見ですので、鵜呑みにせず・・<br />
今回は無料のWikiソフトウェアを比較しようと思います。</p>
<h3><span id="toc2">Wikiソフトウェア</span></h3>
<h4><span id="toc3">PukiWiki</span></h4>
<p>ところどころで使われている日本産のWikiソフトウェア<br />
掲示板、バグトラッキングシステム、メモ、ブログとしても使えたり。<br />
wikiwiki.jpやatwiki.jpのベースだったり。<br />
一時期、開発が止まっていたものの、今でもメンテナンスされ続けています。</p>
<p>言語: PHP<br />
開発: PukiWiki Development Team<br />
誕生: 2001年<br />
ライセンス: GPLv2+</p>
<a rel="noopener" href="https://pukiwiki.osdn.jp/" title="FrontPage - PukiWiki-official" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fpukiwiki.osdn.jp%2F?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">FrontPage - PukiWiki-official</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://pukiwiki.osdn.jp/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">pukiwiki.osdn.jp</div></div></div></div></a>
<h5><span id="toc4">メリット</span></h5>
<p>データベース不要<br />
簡単に設置可能<br />
ページの管理が簡単<br />
プラグインが豊富<br />
機能は比較的多い</p>
<h5><span id="toc5">デメリット</span></h5>
<p>アカウント管理機能がない(プラグインを使えば可能)<br />
デザインが古臭い(スキンを使えば可能)<br />
WYSIWYG編集未対応(プラグインを使えば可能)</p>
<h4><span id="toc6">DokuWiki</span></h4>
<p>こちらもPukiWikiと同様、データベース不要というのが特徴的ですね。<br />
大量のプラグインもあります。<br />
ドキュメント管理には向いています。</p>
<p>言語: PHP<br />
開発: Andreas Gohr<br />
誕生: 2004年<br />
ライセンス: GPLv2</p>
<a rel="noopener" href="https://www.dokuwiki.org/" title="dokuwiki [DokuWiki]" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://s.wordpress.com/mshots/v1/https%3A%2F%2Fwww.dokuwiki.org%2F?w=160&#038;h=90" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">dokuwiki [DokuWiki]</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.dokuwiki.org/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.dokuwiki.org</div></div></div></div></a>
<h5><span id="toc7">メリット</span></h5>
<p>データベース不要<br />
アカウント管理機能<br />
ファイルの管理が直接DokuWikiでできる<br />
多言語対応<br />
スパム対策機能</p>
<h5><span id="toc8">デメリット</span></h5>
<p>日本人の利用者はあまりいない<br />
Markdown未対応(プラグインを使えば可能)<br />
WYSIWYG編集未対応(プラグインを使えば可能)</p>
<h4><span id="toc9">MediaWiki</span></h4>
<p>あのWikipediaで使われているソフトウェアですね。<br />
デザインも綺麗で見慣れています。<br />
ただ、直感で操作できる訳ではないでしょうね、</p>
<p>言語: PHP<br />
開発: Wikimedia Foundation Inc.<br />
誕生: 2001年<br />
ライセンス: GPL</p>
<a rel="noopener" href="https://www.mediawiki.org/" title="MediaWiki" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/baa5aa3d42a4f5cea6bcba78108be849.jpg" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">MediaWiki</div><div class="blogcard-snippet external-blogcard-snippet"></div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://www.mediawiki.org/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">www.mediawiki.org</div></div></div></div></a>
<h5><span id="toc10">メリット</span></h5>
<p>アカウント管理機能<br />
多言語対応<br />
スパム対策機能<br />
とても多機能<br />
WYSIWYG編集</p>
<h5><span id="toc11">デメリット</span></h5>
<p>処理が重たい<br />
Markdown未対応(プラグインを使えば可能)<br />
管理が大変</p>
<h4><span id="toc12">GROWI</span></h4>
<p>Crowiをベースとしたウィキソフトウェア。<br />
Markdownが使える。<br />
クラウドサービスも行っているようだ。</p>
<a rel="noopener" href="https://growi.org/" title="OSS開発wikiツールのGROWI | 快適な情報共有を、全ての人へ" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"><div class="blogcard external-blogcard eb-left cf"><div class="blogcard-label external-blogcard-label"><span class="fa"></span></div><figure class="blogcard-thumbnail external-blogcard-thumbnail"><img src="https://blog.pkom.ml/wp-content/uploads/cocoon-resources/blog-card-cache/c73cfccf0479301e9b71a134bb42458c.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="160" height="90" /></figure><div class="blogcard-content external-blogcard-content"><div class="blogcard-title external-blogcard-title">OSS開発wikiツールのGROWI | 快適な情報共有を、全ての人へ</div><div class="blogcard-snippet external-blogcard-snippet">GROWIはWESEEKが開発を行い、MITライセンスで公開しているオープンソースソフトウェアです。 dockerへのインストールやオンプレ対応も可能です。 開発を手伝っていただけるコントリビューター、開発してみたいインターン生も募集しています。</div></div><div class="blogcard-footer external-blogcard-footer cf"><div class="blogcard-site external-blogcard-site"><div class="blogcard-favicon external-blogcard-favicon"><img src="https://www.google.com/s2/favicons?domain=https://growi.org/" alt="" class="blogcard-favicon-image external-blogcard-favicon-image" width="16" height="16" /></div><div class="blogcard-domain external-blogcard-domain">growi.org</div></div></div></div></a>
<p>言語: JavaScript (Node.js)<br />
開発: 株式会社WESEEK<br />
誕生: 2017年<br />
ライセンス: MIT</p>
<h5><span id="toc13">メリット</span></h5>
<p>Markdown<br />
グループ・アカウント管理機能<br />
編集機能が多い<br />
UML記述機能<br />
管理が簡単<br />
デメリット<br />
プラグインが少ない<br />
少し重たい</p>
<h2><span id="toc14">おわりに</span></h2>
<p>私はやっぱりPukiWikiが好みです。<br />
プラグイン開発も楽しいですし、管理もしやすい。<br />
何よりナビバーの操作性が高い点ですね。<br />
もちろんMediaWikiやGrowiなどもいいんですけどね。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.pkom.ml/20220720111/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
